{
  "Climb": "F4gH",
  "moves": [
    {
      "status": "complete",
      "description": "Implement conditional startup delay in `PeriodicScanner._run_periodic_scan`.",
      "details": "In `backend/src/mus/infrastructure/tasks/background_scanner.py`, modify the `PeriodicScanner._run_periodic_scan` method. Directly before the `while not self._stop_event.is_set():` loop, add the following logic: `if settings.APP_ENV != \"test\": await asyncio.sleep(0.5)`. Ensure `asyncio` is imported, and `settings` is imported from `src.mus.config` (e.g., `from src.mus.config import settings`). No `_first_scan_done` flag is needed as the sleep is outside the loop and will only run once when the `_run_periodic_scan` coroutine starts. This change is specifically designed not to affect existing test behavior as the sleep is conditional on `settings.APP_ENV != \"test\"`, and tests run with `APP_ENV=\"test\"`.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/tasks/background_scanner.py`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Refactor `CoverProcessor.process_and_save_cover` for threaded `pyvips` operations, update its tests, and run `make ci`.",
      "details": "In `backend/src/mus/infrastructure/scanner/cover_processor.py`, modify `CoverProcessor.process_and_save_cover`. Extract the `pyvips` image processing logic (`VipsImage.new_from_buffer`, `image.webpsave`, `image.thumbnail_image`, `thumbnail.webpsave`) into a new private synchronous helper method, e.g., `_save_cover_sync(self, track_id: int, cover_data_cleaned: bytes, original_path: Path, small_path: Path, file_path: Optional[Path] = None) -> bool`. This new method should contain the core `pyvips` calls, associated try-except block, and return `True` on success, `False` on failure (logging errors). The main `process_and_save_cover` method will call this helper using `return await asyncio.to_thread(self._save_cover_sync, track_id, cleaned_data, original_path, small_path, file_path)`. Ensure `asyncio` is imported. Update tests for `CoverProcessor.process_and_save_cover` in `backend/tests/infrastructure/test_cover_processor.py` (and/or `test_enhanced_cover_processor.py` as applicable). Tests must be `async` (`pytest.mark.asyncio`). Mock `asyncio.to_thread` and the wrapped `_save_cover_sync` to verify correct arguments and handling of success/failure. After code and test changes, run `make ci` from the project root and ensure all checks pass without any errors or warnings.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/scanner/cover_processor.py`,`backend/tests/infrastructure/test_cover_processor.py`,`backend/tests/infrastructure/test_enhanced_cover_processor.py`",
      "rest": "true"
    }
  ]
}
