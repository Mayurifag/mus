{
  "Climb": "BugF1x",
  "moves": [
    {
      "status": "complete",
      "description": "Backend: Debug and Fix Background Scanner Anomaly (Persistent '1 added' Log)",
      "details": "Investigate why `background_scanner.py` logs 'Scan completed: 1 added, 0 updated, 0 errors' on subsequent scans even when no music files have changed. Focus on `ScanTracksUseCase._extract_metadata_sync` (especially `mtime` handling), `ScanTracksUseCase.scan_directory` (logic around `min_mtime_for_scan` from `SQLiteTrackRepository.get_latest_track_added_at`), and `SQLiteTrackRepository.upsert_track` to understand how a track is determined as 'added' vs 'updated' or 'unchanged'. The goal is for the scan to correctly report 0 added, 0 updated when no new or modified files are present since the last scan. Ensure timestamps (file mtime vs. DB added_at) are compared correctly and consistently (e.g., UTC timezone considerations if any). Review if `pyvips` or `mutagen` interaction could be falsely triggering change detection. Update `backend/tests/application/test_scan_tracks_use_case.py` with tests that simulate multiple scan runs: one initial scan, then a second scan with no file changes, verifying the second scan reports 0 added/updated. Add a test for a second scan with one modified file (updated mtime) to ensure it's correctly reported as updated.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc`",
      "filepaths_to_modify": "`backend/src/mus/application/use_cases/scan_tracks_use_case.py,backend/src/mus/infrastructure/persistence/sqlite_track_repository.py,backend/src/mus/infrastructure/scanner/file_system_scanner.py,backend/tests/application/test_scan_tracks_use_case.py`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Backend: Resolve VIPS Cover Processing Error ('unable to load from buffer')",
      "details": "Address the `VipsForeignLoad: buffer is not in a known format` error in `CoverProcessor.process_and_save_cover`. This involves: 1. Robustly checking the `cover_data` buffer received from `extract_cover_from_file` before passing to `VipsImage.new_from_buffer`. Ensure it's not None or empty. 2. If possible, add a try-except block specifically around `VipsImage.new_from_buffer(cover_data, \"\")` to catch `pyvips.Error` and log more specific details about the failing buffer (e.g., its first few bytes if it's small, or its length). 3. Verify that `_extract_mp3_cover` and `_extract_flac_cover` are consistently returning valid image byte streams or `None`. Pay attention to common issues like partial/corrupt image data in tags. 4. Ensure `asyncio.to_thread(self._extract_cover_sync, file_path)` correctly handles exceptions from the sync extraction methods and propagates `None` cleanly. Update `backend/tests/infrastructure/test_cover_processor.py` and `backend/tests/infrastructure/test_enhanced_cover_processor.py`. Add tests with mock audio files that yield invalid/empty cover data to ensure `process_and_save_cover` handles these gracefully (returns False, logs error, doesn't crash). Test with valid cover data to ensure it still works. Consider testing with known problematic audio files if available.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/scanner/cover_processor.py,backend/tests/infrastructure/test_cover_processor.py,backend/tests/infrastructure/test_enhanced_cover_processor.py`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Full-Stack: Fix Player State Persistence and Restoration",
      "details": "Rectify the broken player state saving and restoration. Backend: 1. In `SQLitePlayerStateRepository.save_state`, double-check the `sqlite_upsert` logic for `PlayerState` to ensure `is_shuffle` and `is_repeat` are correctly included in the `set_` clause for updates. 2. Verify the `POST /api/v1/player/state` endpoint in `backend/src/mus/infrastructure/api/routers/player_router.py` correctly deserializes the `PlayerStateDTO` including `is_shuffle` and `is_repeat`, and passes it to `ManagePlayerStateUseCase`. Add debug logging if necessary to inspect received payloads. Frontend: 1. In `frontend/src/routes/(app)/+layout.svelte`, ensure `constructPlayerStateDTO` correctly populates `is_shuffle` and `is_repeat` from `$playerStore`. 2. Debug `sendPlayerStateBeacon`: verify the `Blob` with `application/json` is correctly formed and the beacon is sent. Use browser developer tools (Network tab, preserve log on navigation) to inspect beacon requests on page unload/hide. 3. Debug `debouncedSavePlayerState`: ensure it's triggered by changes to `$playerStore.is_shuffle` and `$playerStore.is_repeat` and sends the complete DTO. 4. Revise state restoration logic in `onMount` within `+layout.svelte`: ensure `data.playerState` (if it exists and contains `is_shuffle`, `is_repeat`) correctly updates `$playerStore`. Handle default states if `data.playerState` is null or incomplete. Ensure the audio element's `currentTime` is correctly set from `progress_seconds`. 5. Test the entire flow: change shuffle/repeat, play a track, change progress, navigate away or reload, then verify the state is restored. Test for cases with no prior state. Add/update tests in `backend/tests/api/test_player_state_api.py` for saving/loading shuffle/repeat. Add/update tests in `frontend/src/routes/(app)/__tests__/layout.test.ts` to mock `data` and verify store initialization for shuffle/repeat and correct `audio.currentTime` application. Test `sendBeacon` and debounced save logic with mocks.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py,backend/src/mus/infrastructure/api/routers/player_router.py,backend/src/mus/application/dtos/player_state.py,backend/tests/api/test_player_state_api.py,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/services/apiClient.ts,frontend/src/lib/stores/playerStore.ts,frontend/src/routes/(app)/__tests__/layout.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Optimize Cover Image Loading: Frontend Lazy Load & Backend Caching Headers",
      "details": "Frontend: In `frontend/src/lib/components/domain/TrackItem.svelte`, add the `loading=\"lazy\"` attribute to the `<img>` tag used for displaying track covers. This will defer loading of off-screen images. Backend: In `backend/src/mus/infrastructure/api/routers/track_router.py`, for the `get_track_cover` endpoint (`/api/v1/tracks/{track_id}/covers/{size}.webp`): 1. Calculate an ETag for the cover file (e.g., based on file path and modification time, or a hash of its content). 2. Set `ETag` and `Cache-Control` (e.g., `public, max-age=31536000, immutable`) headers on the `FileResponse`. 3. Handle `If-None-Match` request headers: if the client's ETag matches the current ETag, return a `304 Not Modified` response. Update `backend/tests/api/test_track_api.py` to verify ETag and Cache-Control headers are present, and that a 304 response is returned when If-None-Match matches. Manually verify in browser dev tools that cover images are lazy-loaded and that subsequent requests for the same cover utilize caching (304 or browser cache).",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/python.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/components/domain/TrackItem.svelte,backend/src/mus/infrastructure/api/routers/track_router.py,backend/tests/api/test_track_api.py`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Address Initial Track Loading UI Blink/Flash",
      "details": "Investigate and fix the UI behavior where tracks appear, disappear (or show as 'missed'), then reappear correctly on initial page load. Also, it seems, frontend asks for API of tracks too much, its not one query. Review: 1. Data flow from `frontend/src/routes/(app)/+layout.server.ts`: ensure `tracks` and `playerState` are consistently loaded and returned. 2. Hydration in `frontend/src/routes/(app)/+layout.svelte`: how `data.tracks` is initially passed to `trackStore.setTracks()`. Ensure this happens once and correctly. 3. `trackStore` logic: verify `setTracks` and `setCurrentTrackIndex` do not cause intermediate states that would lead to the list appearing empty or incorrect momentarily. 4. `TrackList.svelte` and `TrackItem.svelte` rendering: ensure they handle empty or partially loaded states gracefully. This might involve checking if `tracks.length === 0` in `TrackList.svelte` is reactive and how it interacts with subsequent updates from the store. The goal is a smooth initial load where tracks are either shown directly or a loading state is maintained until tracks are available, without a flash of incorrect content. Add/Update tests in `frontend/src/routes/(app)/__tests__/layout.test.ts` and `frontend/src/lib/components/domain/TrackList.svelte.test.ts` to simulate initial load scenarios and verify stable rendering.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/routes/(app)/+layout.server.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/stores/trackStore.ts,frontend/src/lib/components/domain/TrackList.svelte,frontend/src/routes/(app)/__tests__/layout.test.ts,frontend/src/lib/components/domain/TrackList.svelte.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Backend: Code Cleanup - Remove Placeholder Routers and Schemas Module",
      "details": "Remove unused placeholder API components from the backend. 1. Delete file `backend/src/mus/infrastructure/api/routers/album_router.py`. 2. Delete file `backend/src/mus/infrastructure/api/routers/artist_router.py`. 3. Delete file `backend/src/mus/infrastructure/api/routers/playlist_router.py`. 4. Delete file `backend/src/mus/infrastructure/api/schemas.py`. 5. In `backend/src/mus/main.py`: remove imports for `album_router`, `artist_router`, `playlist_router`. Remove the corresponding `app.include_router(...)` calls for these three routers. 6. In `backend/src/mus/infrastructure/api/routers/__init__.py`: remove imports and `__all__` entries for `album_router`, `artist_router`, `playlist_router`. 7. Globally search for any remaining imports of `src.mus.infrastructure.api.schemas` and update them to import directly from `src.mus.application.dtos` if necessary (though this is unlikely as `schemas.py` was primarily for re-exporting). 8. Run `make back-test` and `make ci` to ensure no breakages. Update or remove any tests that might have specifically targeted these deleted routers or schema re-exports (e.g., if there were tests in `backend/tests/api/` for these empty routers).",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/api/routers/album_router.py,backend/src/mus/infrastructure/api/routers/artist_router.py,backend/src/mus/infrastructure/api/routers/playlist_router.py,backend/src/mus/infrastructure/api/schemas.py,backend/src/mus/main.py,backend/src/mus/infrastructure/api/routers/__init__.py,backend/tests/api/`",
      "rest": "skip"
    }
  ]
}
