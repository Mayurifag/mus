{
  "Climb": "fRntClntFtch",
  "moves": [
    {
      "status": "complete",
      "description": "Move production dependencies to devDependencies and remove xior.",
      "details": "In `frontend/package.json`, move all packages currently listed under `dependencies` (clsx, date-fns, lucide-svelte, mode-watcher, svelte-sonner, tailwind-merge, tailwind-variants) to `devDependencies`. First analyze them using context7 and see if any of them have some kind of runtime. Then, remove the `xior` package. Use appropriate `make` commands for these operations. \n\n1. Uninstall `xior`: RUN `make front-npm-uninstall xior`. \n2. For each other dependency currently in `dependencies` (e.g., `clsx`, `date-fns`, etc.): \n   a. Uninstall it from `dependencies`: RUN `make front-npm-uninstall <dependency-name>`. \n   b. Install it into `devDependencies`: RUN `make front-npm-dev-install <dependency-name>`. \n\nNote: Moving runtime dependencies to `devDependencies` is unconventional. While bundlers like Vite will include used code in the production build regardless of this placement, this practice can obscure the nature of these dependencies (runtime vs. development-only) for developers and some tooling. The primary benefit of `dependencies` vs. `devDependencies` relates to `npm install --production` behavior, which is less critical for frontend projects that are typically bundled. This change fulfills the user's request but standard practice is to keep runtime libraries in `dependencies`.",
      "rules_filepaths_to_follow": "`.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`frontend/package.json,frontend/package-lock.json`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Refactor apiClient.ts to use native fetch and update tests.",
      "details": "In `frontend/src/lib/services/apiClient.ts`:\n1. Remove the `xior` import and the global `api` instance created with `xior.create()`.\n2. Refactor `fetchTracks`: Replace `api.get('/tracks')` with a native `fetch` call to `${API_BASE_URL}/tracks`. If `!response.ok`, or if a network error occurs, log the error to the console and return an empty array `[]`. Maintain the `Promise<Track[]>` return type.\n3. Refactor `fetchPlayerState`: Replace `api.get('/player/state')` with a native `fetch` call to `${API_BASE_URL}/player/state`. If `response.status === 404`, return `null`. If `!response.ok` for other reasons, or if a network error occurs, log the error to the console and return `null`. Maintain the `Promise<PlayerState | null>` return type.\n4. Refactor `triggerTestToasts`: Replace `api.get('/events/test_toast')` with a native `fetch` call to `${API_BASE_URL}/events/test_toast`. If `!response.ok`, throw an error (e.g., `new Error(\`HTTP error! status: ${response.status}\`)`). Maintain the `Promise<{ message: string; events_count: number; }>` return type.\n5. Ensure all other functions (`getStreamUrl`, `sendPlayerStateBeacon`, `connectTrackUpdateEvents`) remain unchanged as they do not directly use the `xior` instance.\n\nIn `frontend/src/lib/services/apiClient.test.ts`:\n1. Update tests to mock `global.fetch` instead of spying on `apiClient`'s exported functions or the `xior` instance.\n2. For `fetchTracks` tests: Verify `fetch` is called with `${API_BASE_URL}/tracks`. Mock `fetch` responses to test successful data parsing and error handling (returning `[]`).\n3. For `fetchPlayerState` tests: Verify `fetch` is called with `${API_BASE_URL}/player/state`. Mock `fetch` responses to test successful data parsing, 404 handling (returning `null`), and other error handling (returning `null`).\n4. For `sendPlayerStateBeacon`: This function uses `navigator.sendBeacon` not `xior`, so its tests might not need changes unless they were indirectly relying on `xior` mocks. Review and ensure they remain valid. If `navigator.sendBeacon` was mocked, ensure that continues to work. The primary change is removing `xior` dependency, so ensure no tests implicitly depend on `xior` being present or mocked.\n5. No tests currently exist for `triggerTestToasts`. Add tests for this function: verify `fetch` is called with `${API_BASE_URL}/events/test_toast`. Mock `fetch` responses to test successful data parsing and error handling (throwing an error on `!response.ok`).",
      "rules_filepaths_to_follow": "`.cursor/rules/typescript.mdc,.augment-guidelines`",
      "filepaths_to_modify": "`frontend/src/lib/services/apiClient.ts,frontend/src/lib/services/apiClient.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Run `make ci` to verify all changes.",
      "details": "After completing the refactoring and dependency management, run the command `make ci` from the project root directory. Ensure that all linters and tests pass without any errors or warnings. Address any issues that arise until the `make ci` command completes successfully.",
      "rules_filepaths_to_follow": "`.cursor/rules/makefile.mdc,.augment-guidelines`",
      "filepaths_to_modify": "",
      "rest": "true"
    }
  ]
}
