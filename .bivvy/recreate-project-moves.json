{
  "file_content": {
    "climb": "R3W7",
    "moves": [
      {
        "status": "complete",
        "description": "Initialize Project Structure and Root Configuration",
        "details": "Context: Set up the basic directory layout and root configuration files for the project. Expected Files Modified: `backend/,frontend/,docker/,.editorconfig,.gitignore,README.md,ARCHITECTURE.md`. Rules: Follow `.cursor/rules/md.mdc` for markdown files. Nuances: Ensure `.gitignore` covers common files for Python, Node, Docker, Tauri, and OS artifacts. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/,frontend/,docker/,.editorconfig,.gitignore,README.md,ARCHITECTURE.md`"
      },
      {
        "status": "complete",
        "description": "Setup Backend Project (FastAPI, SQLModel, UV)",
        "details": "Context: Initialize the Python backend project using `uv`, set up FastAPI, SQLModel, and define the initial database models and repository structure according to Hexagonal Architecture. Expected Files Modified: `backend/pyproject.toml,backend/src/mus/main.py,backend/src/mus/config.py,backend/src/mus/domain/entities/track.py,backend/src/mus/infrastructure/database.py,backend/src/mus/infrastructure/persistence/sqlite_track_repository.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Define `Track` and `PlayerState` SQLModels. Implement basic async `SQLiteTrackRepository`. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/pyproject.toml,backend/src/mus/main.py,backend/src/mus/config.py,backend/src/mus/domain/entities/track.py,backend/src/mus/infrastructure/database.py,backend/src/mus/infrastructure/persistence/sqlite_track_repository.py`"
      },
      {
        "status": "complete",
        "description": "Implement Backend Authentication (Web Access)",
        "details": "Context: Implement the secret-key-based JWT authentication flow for web browser access. Expected Files Modified: `backend/src/mus/infrastructure/api/auth.py,backend/src/mus/infrastructure/api/dependencies.py,backend/src/mus/main.py`. Rules: Follow `.cursor/rules/python.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) to check `python-jose` documentation for JWT creation and cookie setting via FastAPI `RedirectResponse`. Nuances: Generate JWT with HS256, `exp`, `iat`, `sub`. Set HttpOnly cookie. Redirect. No JWT protection on other API endpoints for now. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/infrastructure/api/auth.py,backend/src/mus/infrastructure/api/dependencies.py,backend/src/mus/main.py`"
      },
      {
        "status": "complete",
        "description": "Backend: Define API Data Transfer Objects (DTOs)",
        "details": "Context: Define Pydantic models for API request/response payloads to ensure clear contracts. Expected Files Modified: `backend/src/mus/application/dtos/track.py,backend/src/mus/application/dtos/player_state.py,backend/src/mus/application/dtos/scan.py,backend/src/mus/application/dtos/responses.py,backend/src/mus/application/dtos/__init__.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Define DTOs for `Track`, `PlayerState`, `ScanRequest`, `ScanResponse`, generic `StatusResponse`, `ErrorResponse`, `PagedResponse`. Use `model_config = {\"from_attributes\": True}` where appropriate. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/application/dtos/track.py,backend/src/mus/application/dtos/player_state.py,backend/src/mus/application/dtos/scan.py,backend/src/mus/application/dtos/responses.py,backend/src/mus/application/dtos/__init__.py`"
      },
      {
        "status": "complete",
        "description": "Backend: Implement PlayerState Repository and API Endpoints",
        "details": "Context: Implement the logic and API endpoints for saving and loading the player's state. Expected Files Modified: `backend/src/mus/domain/entities/player_state.py,backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py,backend/src/mus/application/use_cases/manage_player_state_use_case.py,backend/src/mus/infrastructure/api/routers/player_router.py,backend/src/mus/main.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Define `PlayerState` SQLModel. Implement repository methods `save_state`, `load_state` using async SQLModel. Implement `ManagePlayerStateUseCase`. Implement `POST /api/v1/player/state` and `GET /api/v1/player/state` endpoints using the use case and DTOs. Register router. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/domain/entities/player_state.py,backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py,backend/src/mus/application/use_cases/manage_player_state_use_case.py,backend/src/mus/infrastructure/api/routers/player_router.py,backend/src/mus/main.py`"
      },
      {
        "status": "complete",
        "description": "Refactor Backend Configuration: Hardcode Settings and Simplify `config.py`",
        "details": "Context: Simplify configuration by hardcoding non-sensitive paths and reducing reliance on environment variables for them. Expected Files Modified: `backend/src/mus/config.py,backend/src/mus/infrastructure/api/auth.py,backend/src/mus/infrastructure/database.py,backend/src/mus/infrastructure/scanner/file_system_scanner.py,backend/src/mus/infrastructure/scanner/cover_processor.py,.gitignore`. Rules: Follow `.cursor/rules/python.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for `aiosqlite` engine creation if needed. Nuances: `Config` should only contain `SECRET_KEY`. Hardcode `LOGIN_SECRET` (use default), `DATABASE_FILE_PATH` (use `mus_database.db`), `MUSIC_DIR` (use `./music`), `COVERS_DIR` (use `./data/covers`). Use `os.makedirs(..., exist_ok=True)` for these paths. Update `.gitignore`. Testing Requirement: Verify all existing tests pass. Update or add tests as needed to cover any behavioral changes resulting from the refactoring. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/config.py,backend/src/mus/infrastructure/api/auth.py,backend/src/mus/infrastructure/database.py,backend/src/mus/infrastructure/scanner/file_system_scanner.py,backend/src/mus/infrastructure/scanner/cover_processor.py,.gitignore`"
      },
      {
        "status": "complete",
        "description": "Update Backend Cover Processing (Original and Small WebP)",
        "details": "Context: Modify cover processing to generate only 'original' and 'small' WebP images, removing 'medium'. Expected Files Modified: `backend/src/mus/infrastructure/scanner/cover_processor.py`. Rules: Follow `.cursor/rules/python.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for `pyvips` documentation on image conversion and thumbnailing to WebP. Nuances: Use `pyvips` to generate `{track_id}_original.webp` (original dimensions) and `{track_id}_small.webp` (e.g., 80x80). Ensure appropriate WebP quality settings (e.g., Q=100 for original, Q=90 for small). Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/infrastructure/scanner/cover_processor.py`"
      },
      {
        "status": "complete",
        "description": "Update Backend Cover API Endpoint and TrackDTO for New Cover URLs",
        "details": "Context: Align the Track DTO and cover API endpoint with the new 'original' and 'small' cover image strategy. Expected Files Modified: `backend/src/mus/application/dtos/track.py,backend/src/mus/infrastructure/api/routers/track_router.py,backend/src/mus/infrastructure/api/schemas.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Update `TrackDTO` to have `cover_small_url` and `cover_original_url`, remove `cover_medium_url`. Update `GET /api/v1/tracks/{track_id}/covers/{size}.webp` endpoint to accept `size`='original' or 'small', remove 'medium'. Update logic that populates `TrackDTO` to construct correct URLs using `request.url_for`. Update API schemas if needed. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/application/dtos/track.py,backend/src/mus/infrastructure/api/routers/track_router.py,backend/src/mus/infrastructure/api/schemas.py`"
      },
      {
        "status": "complete",
        "description": "Implement SQLite UPSERT for PlayerState Repository",
        "details": "Context: Refactor the player state saving mechanism to use an atomic UPSERT operation for reliability. Expected Files Modified: `backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py,backend/src/mus/domain/entities/player_state.py`. Rules: Follow `.cursor/rules/python.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for SQLAlchemy/SQLModel documentation on SQLite `INSERT ... ON CONFLICT DO UPDATE` dialect implementation. Nuances: Modify `save_state` in `SQLitePlayerStateRepository`. Use `sqlalchemy.dialects.sqlite.insert` with `on_conflict_do_update`. Conflict target should be `id=1`. Update all fields except `id` on conflict using `stmt.excluded`. Ensure `PlayerState` model has `id=Field(default=1, primary_key=True)`. Return the persisted state after upsert. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py,backend/src/mus/domain/entities/player_state.py`"
      },
      {
        "status": "complete",
        "description": "Implement SQLite UPSERT for Track Entities (SQLModel, Repository, Use Case)",
        "details": "Context: Implement UPSERT logic for tracks based on `file_path` to handle rescans efficiently, adding new tracks and updating metadata for existing ones. Expected Files Modified: `backend/src/mus/domain/entities/track.py,backend/src/mus/infrastructure/persistence/sqlite_track_repository.py,backend/src/mus/application/use_cases/scan_tracks_use_case.py`. Rules: Follow `.cursor/rules/python.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for SQLModel/SQLAlchemy documentation on unique constraints and handling potential race conditions or alternative UPSERT methods if dialect-specific UPSERT is complex. Nuances: Add `unique=True` to `Track.file_path` field. Implement `upsert_track(track_data: Track)` in `SQLiteTrackRepository`. Check existence first, then update or insert. Preserve `id` and `added_at` on update. Update `title`, `artist`, `duration`, `has_cover`. Modify `ScanTracksUseCase` to call `upsert_track` instead of `exists_by_path` and `add`. Use the returned track ID for cover processing. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/domain/entities/track.py,backend/src/mus/infrastructure/persistence/sqlite_track_repository.py,backend/src/mus/application/use_cases/scan_tracks_use_case.py`"
      },
      {
        "status": "complete",
        "description": "Backend: Implement Core Track Endpoints (List, Stream, Covers)",
        "details": "Context: Implement the main API endpoints for retrieving track lists, streaming audio content, and accessing cover art. Expected Files Modified: `backend/src/mus/infrastructure/api/routers/track_router.py,backend/src/mus/main.py`. Rules: Follow `.cursor/rules/python.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for FastAPI documentation on `FileResponse`, streaming responses, and handling Range requests. Nuances: Implement `GET /api/v1/tracks` (fetch all from repo, order by `added_at`, map to DTOs with cover URLs). Implement `GET /api/v1/tracks/{track_id}/stream` (fetch track, stream `track.file_path` using `FileResponse`, handle `FileNotFoundError`, support Range requests if possible). Implement `GET /api/v1/tracks/{track_id}/covers/{size}.webp` (verify size 'small'/'original', serve correct file using `FileResponse`, handle missing track/cover). Register router in `main.py`. Ensure endpoints are not JWT protected. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/infrastructure/api/routers/track_router.py,backend/src/mus/main.py`"
      },
      {
        "status": "complete",
        "description": "Backend: Implement Track Scanning Logic (Adapting / Placeholder)",
        "details": "Context: Implement the core logic for scanning directories, extracting basic metadata, processing covers, and using the repository UPSERT. Expected Files Modified: `backend/src/mus/infrastructure/scanner/file_system_scanner.py,backend/src/mus/infrastructure/scanner/cover_processor.py,backend/src/mus/application/use_cases/scan_tracks_use_case.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Implement `FileSystemScanner` to find supported audio files recursively (`.mp3`, `.flac`). Implement `ScanTracksUseCase`: orchestrate scanner, call repository's `upsert_track` for each found file (use filename for title/artist, dummy duration for now). Implement basic cover handling: attempt to call `CoverProcessor` (needs cover data extraction - add placeholder logic or skip actual extraction for now), update `has_cover` flag via repository after upsert. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/infrastructure/scanner/file_system_scanner.py,backend/src/mus/infrastructure/scanner/cover_processor.py,backend/src/mus/application/use_cases/scan_tracks_use_case.py`"
      },
      {
        "status": "complete",
        "description": "Backend: Implement Scan Endpoint and Finalize API Routers",
        "details": "Context: Create the API endpoint to trigger a library scan and ensure all backend API routes are correctly set up. Expected Files Modified: `backend/src/mus/infrastructure/api/routers/scan_router.py,backend/src/mus/main.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Create `scan_router.py`. Implement `POST /api/v1/scan`. This endpoint should trigger the `ScanTracksUseCase`. Return a `ScanResponseDTO`. Register the `scan_router` in `main.py`. Review all routers (`auth`, `player`, `track`, `scan`) and ensure they are included and endpoints match PRD/Architecture. Confirm endpoints are not JWT protected. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/mus/infrastructure/api/routers/scan_router.py,backend/src/mus/main.py`"
      },
      {
        "status": "complete",
        "description": "Backend Tests: Setup and Core Functionality Tests",
        "details": "Context: Set up the Pytest environment and write tests for core backend components like repositories and authentication. Expected Files Modified: `backend/pyproject.toml,backend/tests/conftest.py,backend/tests/persistence/test_sqlite_track_repository.py,backend/tests/persistence/test_sqlite_player_state_repository.py,backend/tests/test_auth.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Configure `pyproject.toml` for `pytest-asyncio`. Set up `conftest.py` with async fixtures for test client, in-memory/test file DB engine/session. Write tests for `SQLiteTrackRepository` (add, get, get_all, exists_by_path, set_cover_flag, upsert). Write tests for `SQLitePlayerStateRepository` (save_state UPSERT, load_state). Write tests for auth endpoints (`/login-via-secret`, `/me`). The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/pyproject.toml,backend/tests/conftest.py,backend/tests/persistence/test_sqlite_track_repository.py,backend/tests/persistence/test_sqlite_player_state_repository.py,backend/tests/test_auth.py`"
      },
      {
        "status": "complete",
        "description": "Backend Tests: API Endpoint and Use Case Tests",
        "details": "Context: Write integration tests for the main API endpoints and unit/integration tests for the use cases. Expected Files Modified: `backend/tests/api/test_track_api.py,backend/tests/api/test_player_state_api.py,backend/tests/api/test_scan_api.py,backend/tests/application/test_scan_tracks_use_case.py,backend/tests/application/test_manage_player_state_use_case.py`. Rules: Follow `.cursor/rules/python.mdc`. Nuances: Test track endpoints (`GET /tracks`, `GET /tracks/{id}/stream`, `GET /tracks/{id}/covers/{size}` - success, 404s, placeholders). Test player state endpoints (`GET /state`, `POST /state`). Test scan endpoint (`POST /scan` - trigger, response, mock use case). Test `ScanTracksUseCase` (mock repo/scanner/processor, verify orchestration). Test `ManagePlayerStateUseCase`. Aim for >80% coverage. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/tests/api/test_track_api.py,backend/tests/api/test_player_state_api.py,backend/tests/api/test_scan_api.py,backend/tests/application/test_scan_tracks_use_case.py,backend/tests/application/test_manage_player_state_use_case.py`"
      },
      {
        "status": "todo",
        "description": "Update Tests and Run Linters/Formatters (Backend Focus)",
        "details": "Context: Ensure all backend tests pass and linters/formatters are clean before starting frontend work. Expected Files Modified: Potentially any backend file (`*.py`) or test file (`backend/tests/**/*.py`). Commands: Run `make back-format`, `make back-lint`, `make back-test`. Rules: Follow `.cursor/rules/python.mdc`, `.cursor/rules/makefile.mdc`, `.cursor/rules/makefile_commands.mdc`. Nuances: Iteratively fix any errors or warnings reported by Ruff (linting, formatting) and Pytest until `make back-format`, `make back-lint`, `make back-test` all pass cleanly. Verify test coverage meets target (>80%). The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/src/**/*.py,backend/tests/**/*.py`",
        "rest": true
      },
      {
        "status": "todo",
        "description": "Frontend: Initialize SvelteKit Project and Core Dependencies",
        "details": "Context: Set up the SvelteKit project structure and install necessary base dependencies. Expected Files Modified: `frontend/package.json,frontend/svelte.config.js,frontend/vite.config.ts,frontend/tsconfig.json`, plus generated SvelteKit files. Commands: Ensure `frontend/` exists and is empty. RUN `npm create svelte@latest frontend` (select Skeleton project, TypeScript, ESLint, Prettier). `cd frontend`. RUN `npm install lucide-svelte date-fns clsx tailwind-merge`. Rules: Follow `.cursor/rules/typescript.mdc`, `.cursor/rules/svelte.mdc` (if exists), `.cursor/rules/json.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for `create-svelte` options if needed. Nuances: Verify `package.json` includes SvelteKit, Svelte, Vite, TS, ESLint, Prettier, installed libs. Basic config files generated. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/`"
      },
      {
        "status": "todo",
        "description": "Frontend: Setup Tailwind CSS and Shadcn-Svelte",
        "details": "Context: Integrate Tailwind CSS for styling and initialize `shadcn-svelte` for UI components. Expected Files Modified: `frontend/tailwind.config.js,frontend/src/app.postcss,frontend/src/app.html,frontend/src/lib/utils.ts,frontend/components.json`. Commands: `cd frontend`. RUN `npm install -D tailwindcss postcss autoprefixer`. RUN `npx tailwindcss init -p`. Configure `tailwind.config.js` content paths (`./src/**/*.{html,js,svelte,ts}`). Create `src/app.postcss` with Tailwind directives (`@tailwind base; @tailwind components; @tailwind utilities;`). Import `app.postcss` in `src/app.html` or layout. RUN `npx shadcn-svelte@latest init` (choose style, color, confirm paths for `tailwind.config.js`, `app.postcss`, components alias `@/lib/components`, utils alias `@/lib/utils`). RUN `npx shadcn-svelte@latest add button card slider sonner` to test. Rules: Follow relevant rules for `.js`, `.css`, `.ts`, `.json`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for `shadcn-svelte init` command options. Nuances: Ensure Tailwind applies correctly. Verify `components.json` is created and `utils.ts` populated. Ensure dark mode is configured in `tailwind.config.js` and applied globally (e.g., on `<body>` in `app.html`). Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/tailwind.config.js,frontend/src/app.postcss,frontend/src/app.html,frontend/src/lib/utils.ts,frontend/components.json`"
      },
      {
        "status": "todo",
        "description": "Frontend: Configure SvelteKit, ESLint, Prettier, and Project Structure",
        "details": "Context: Finalize configuration for SvelteKit, linters, formatters, and establish the project's directory structure. Expected Files Modified: `frontend/svelte.config.js,frontend/vite.config.ts,frontend/tsconfig.json,frontend/.eslintrc.cjs,frontend/.prettierrc`. Create directories: `frontend/src/lib/components/layout,frontend/src/lib/components/domain,frontend/src/lib/stores,frontend/src/lib/services,frontend/src/lib/types,frontend/src/routes/(app),frontend/static/images`. Rules: Follow rules for `.js`, `.cjs`, `.ts`, `.json`. Use `desktop-commander` MCP server to create directories. Nuances: Ensure `vite.config.ts` uses path aliases (e.g., `@/*`). Update `tsconfig.json` paths to match. Configure ESLint/Prettier for Svelte/TS. Create standard lib structure. Create a route group `(app)` for main application layout/pages. Add placeholder icon to `static/images`. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/svelte.config.js,frontend/vite.config.ts,frontend/tsconfig.json,frontend/.eslintrc.cjs,frontend/.prettierrc,frontend/src/lib/,frontend/src/routes/,frontend/static/`"
      },
      {
        "status": "todo",
        "description": "Frontend: Define Core Types and Svelte Stores",
        "details": "Context: Define TypeScript interfaces for backend data and create Svelte stores for managing global frontend state. Expected Files Modified: `frontend/src/lib/types/index.ts,frontend/src/lib/stores/playerStore.ts,frontend/src/lib/stores/trackStore.ts`. Rules: Follow `.cursor/rules/typescript.mdc`. Nuances: Define `Track` interface matching backend `TrackDTO` (including `id`, `title`, `artist`, `duration`, `file_path`, `added_at`, `has_cover`, `cover_small_url`, `cover_original_url`). Define `PlayerState` interface matching backend DTO. Create `playerStore.ts` using `writable` for `currentTrack: Track | null`, `isPlaying: boolean`, `currentTime: number`, `duration: number`, `volume: number`, `isMuted: boolean`. Create `trackStore.ts` using `writable` for `tracks: Track[]`, `currentTrackIndex: number | null`. Include relevant actions/functions to update stores. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/src/lib/types/index.ts,frontend/src/lib/stores/playerStore.ts,frontend/src/lib/stores/trackStore.ts`"
      },
      {
        "status": "todo",
        "description": "Frontend: Setup API Client Layer and Load Functions",
        "details": "Context: Implement functions for interacting with the backend API, including initial data loading using SvelteKit's load mechanism. Expected Files Modified: `frontend/src/lib/services/apiClient.ts,frontend/src/routes/(app)/+layout.server.ts`. Rules: Follow `.cursor/rules/typescript.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for SvelteKit `load` function documentation and error handling. Nuances: Create `apiClient.ts` with base URL and functions for `fetchTracks`, `fetchPlayerState`, `savePlayerState`, `triggerScan` using `fetch`. Implement `load` function in `+layout.server.ts` (or `+page.server.ts` if preferred) to fetch initial tracks and player state using `apiClient` functions. Pass loaded data to corresponding layout/page components. Handle potential fetch errors gracefully. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/src/lib/services/apiClient.ts,frontend/src/routes/(app)/+layout.server.ts`"
      },
      {
        "status": "todo",
        "description": "Frontend: Implement PlayerFooter Component (Layout and Basic Controls)",
        "details": "Context: Build the main player control UI component fixed at the bottom of the screen. Expected Files Modified: `frontend/src/lib/components/layout/PlayerFooter.svelte`. Rules: Follow `.cursor/rules/svelte.mdc` (if exists), `.cursor/rules/typescript.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for `shadcn-svelte` Button, Slider, Card components and `lucide-svelte` icon usage. Nuances: Use `Card` for footer bar. Display current track cover (`cover_original_url`), title, artist (from `playerStore`). Add `Button` components for Previous, Play/Pause, Next using `lucide-svelte` icons. Implement seekable progress `Slider`, display current/total time (use `date-fns` for formatting). Add Mute/Unmute `Button` and volume `Slider`. Style with Tailwind. Component should react to changes in `playerStore`. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/src/lib/components/layout/PlayerFooter.svelte`"
      },
      {
        "status": "todo",
        "description": "Frontend: Implement TrackList and TrackItem Components",
        "details": "Context: Create components to display the list of available tracks. Expected Files Modified: `frontend/src/lib/components/domain/TrackItem.svelte,frontend/src/lib/components/domain/TrackList.svelte`. Rules: Follow `.cursor/rules/svelte.mdc` (if exists), `.cursor/rules/typescript.mdc`. Nuances: `TrackItem.svelte` displays single track info (small cover from `cover_small_url`, title, artist, duration formatted with `date-fns`). Add click handler or play button. `TrackList.svelte` receives track list (likely via prop from `load` function). Use `#each` block to render `TrackItem` components. Handle empty list state. Make list scrollable. Style with Tailwind/Shadcn. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/src/lib/components/domain/TrackItem.svelte,frontend/src/lib/components/domain/TrackList.svelte`"
      },
      {
        "status": "todo",
        "description": "Frontend: Connect UI to State and Services (Player Logic)",
        "details": "Context: Wire up the UI components to the Svelte stores and implement the core audio playback logic. Expected Files Modified: `frontend/src/lib/components/layout/PlayerFooter.svelte,frontend/src/lib/components/domain/TrackItem.svelte,frontend/src/routes/(app)/+layout.svelte,frontend/src/routes/(app)/+page.svelte`. Rules: Follow `.cursor/rules/svelte.mdc` (if exists), `.cursor/rules/typescript.mdc`. Nuances: In `PlayerFooter`, bind button clicks/slider changes to actions in `playerStore`/`trackStore`. Use a reactive `<audio>` element (potentially in `+layout.svelte`) whose `src`, `currentTime`, `volume`, `muted`, `paused` properties are bound to/controlled by `playerStore`. Clicking `TrackItem` should update `playerStore` to play the selected track. Assemble `TrackList` and `PlayerFooter` in `+page.svelte` / `+layout.svelte`. Persist player state changes by calling `savePlayerState` from `apiClient` when relevant store values change (use reactive statements `$:`). Load initial state from `load` function data into stores `onMount`. Ensure dark theme applies. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/src/lib/components/layout/PlayerFooter.svelte,frontend/src/lib/components/domain/TrackItem.svelte,frontend/src/routes/(app)/+layout.svelte,frontend/src/routes/(app)/+page.svelte`"
      },
      {
        "status": "todo",
        "description": "Frontend: Implement PWA Manifest and Basic Service Worker",
        "details": "Context: Add Progressive Web App capabilities for offline app shell access. Expected Files Modified: `frontend/static/manifest.json,frontend/static/images/icon-192.png,frontend/static/images/icon-512.png,frontend/src/service-worker.ts,frontend/src/hooks.client.ts`. Rules: Follow `.cursor/rules/json.mdc`, `.cursor/rules/typescript.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for SvelteKit service worker integration and PWA manifest structure. Use `desktop-commander` MCP server to add placeholder icons. Nuances: Create `manifest.json` with required fields (`name`, `short_name`, `icons`, `start_url`, `display`, `background_color`, `theme_color`). Add sample 192x192 and 512x512 icons. Implement basic `service-worker.ts` using `@sveltejs/kit/service-worker` module for caching built assets (`$service-worker.files`) and potentially app shell. Register SW in `hooks.client.ts` (or `+layout.svelte` `onMount`). Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/static/manifest.json,frontend/static/images/icon-192.png,frontend/static/images/icon-512.png,frontend/src/service-worker.ts,frontend/src/hooks.client.ts`"
      },
      {
        "status": "todo",
        "description": "Frontend Tests: Setup Vitest and Basic Component/Store Tests",
        "details": "Context: Configure the testing environment and write initial tests for stores and simple components. Expected Files Modified: `frontend/vite.config.ts,frontend/package.json,frontend/tests/setup.ts,frontend/src/lib/stores/playerStore.test.ts,frontend/src/lib/stores/trackStore.test.ts,frontend/src/lib/components/domain/TrackItem.test.ts`. Rules: Follow `.cursor/rules/typescript.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for Vitest configuration with Svelte and `@testing-library/svelte` usage. Nuances: Install `@testing-library/svelte`, `vitest`, `jsdom`, `msw`. Configure Vitest in `vite.config.ts` (environment `jsdom`, `globals: true`). Create `tests/setup.ts` for `testing-library` extensions. Add test scripts to `package.json`. Write tests for Svelte stores (initial state, actions). Test `TrackItem` rendering with mock data, verify displayed info, simulate click. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/vite.config.ts,frontend/package.json,frontend/tests/setup.ts,frontend/src/lib/stores/playerStore.test.ts,frontend/src/lib/stores/trackStore.test.ts,frontend/src/lib/components/domain/TrackItem.test.ts`"
      },
      {
        "status": "todo",
        "description": "Frontend Tests: PlayerFooter, API/Load Functions, and Integration Tests",
        "details": "Context: Write tests for more complex components, API interactions, and basic page flows. Expected Files Modified: `frontend/src/lib/components/layout/PlayerFooter.test.ts,frontend/src/lib/services/apiClient.test.ts,frontend/src/routes/(app)/+layout.server.test.ts,frontend/src/routes/(app)/+page.test.ts`. Rules: Follow `.cursor/rules/typescript.mdc`, `.cursor/rules/svelte.mdc` (if exists). Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for mocking SvelteKit `load` functions and using `msw` with Vitest. Nuances: Test `PlayerFooter` interactions (button clicks, slider changes, mock stores). Test `apiClient` functions using `msw` to mock `fetch`. Test `load` functions (mock `fetch` or `apiClient`, verify returned data structure). Write basic integration test for `+page.svelte` (render page, mock `load`, verify `TrackList` and `PlayerFooter` appear, simulate track click). Aim for >70% coverage. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/src/lib/components/layout/PlayerFooter.test.ts,frontend/src/lib/services/apiClient.test.ts,frontend/src/routes/(app)/+layout.server.test.ts,frontend/src/routes/(app)/+page.test.ts`",
        "rest": true
      },
      {
        "status": "todo",
        "description": "Tauri: Initialize and Configure Tauri in Frontend Project",
        "details": "Context: Integrate Tauri into the SvelteKit frontend project to enable desktop builds. Expected Files Modified: `frontend/package.json,frontend/src-tauri/tauri.conf.json,frontend/src-tauri/Cargo.toml`. Commands: `cd frontend`. RUN `npm install --save-dev @tauri-apps/cli @tauri-apps/api`. RUN `npx tauri init` (App name: Mus Next Gen, Window title: Mus, Web asset path: `../build`, Dev server URL: `http://localhost:5173`). Rules: Follow `.cursor/rules/json.mdc`, `.cursor/rules/toml.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for Tauri config options (`tauri.conf.json`). Nuances: Verify `build.distDir` is correctly set relative to `src-tauri` (e.g., `../build`). Verify `build.devPath` points to SvelteKit dev server URL. Set initial window size. In `tauri.allowlist`, enable `http.all: true` or scope `http.scope` to backend URL (e.g., `[\"http://localhost:8000/*\"]`) for API calls. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`frontend/package.json,frontend/src-tauri/tauri.conf.json,frontend/src-tauri/Cargo.toml`"
      },
      {
        "status": "todo",
        "description": "Tauri: Test Development Workflow and Build",
        "details": "Context: Verify that the SvelteKit app runs correctly within Tauri during development and that production builds can be created. Expected Files Modified: None. Commands: `cd frontend`. Run SvelteKit dev: `npm run dev`. In another terminal, run Tauri dev: `npx tauri dev`. Test app functionality. Stop dev servers. Run SvelteKit build: `npm run build`. Run Tauri build: `npx tauri build`. Rules: Follow `.cursor/rules/makefile_commands.mdc` if using make targets later. Nuances: Check for errors during `tauri dev` and `tauri build`. Verify executable/installer is created in `frontend/src-tauri/target/release/`. Confirm API calls from Tauri window to backend work. Document any potential native feature ideas in `ARCHITECTURE.md`. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "``"
      },
      {
        "status": "todo",
        "description": "Docker: Create Dockerignore Files and Backend Dockerfile",
        "details": "Context: Set up ignore files for Docker contexts and create the Dockerfile for the backend service. Expected Files Modified: `backend/.dockerignore,frontend/.dockerignore,.dockerignore,docker/backend.Dockerfile`. Rules: Follow `.cursor/rules/docker.mdc`. Nuances: Ensure `.dockerignore` files exclude build artifacts, env files, IDE folders, `node_modules`, `target`, etc. `backend.Dockerfile`: use Python slim image, install `uv`, install deps using `uv pip install --system`, copy backend source, expose port 8000, set `CMD` to run `uvicorn`. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`backend/.dockerignore,frontend/.dockerignore,.dockerignore,docker/backend.Dockerfile`"
      },
      {
        "status": "todo",
        "description": "Docker: Create Production Dockerfile (Multi-stage)",
        "details": "Context: Create a multi-stage Dockerfile for production that builds the frontend and combines it with the backend. Expected Files Modified: `docker/production.Dockerfile,backend/src/mus/main.py`. Rules: Follow `.cursor/rules/docker.mdc`, `.cursor/rules/python.mdc`. Use `context7` MCP server (tokens: 5000-20000, max 3 tries) for FastAPI `StaticFiles` mounting documentation. Nuances: Stage 1 (`frontend-builder`): Use `node:alpine`, copy `frontend` code, run `npm install`, run `npm run build`. Stage 2: Use Python slim image, install `uv`, install backend deps, copy backend code. Copy built frontend assets from Stage 1 (from `/app/frontend/build`) to a location in backend stage (e.g., `/app/backend/static_root`). In `backend/src/mus/main.py`, add `app.mount(\"/\", StaticFiles(directory=\"/app/backend/static_root\", html=True), name=\"static\")` to serve the frontend. Define volumes for `/app/data` and `/music`. Set final `CMD`. Testing Requirement: Add comprehensive unit and integration tests for all new/modified functionality. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`docker/production.Dockerfile,backend/src/mus/main.py`"
      },
      {
        "status": "todo",
        "description": "Docker: Create Docker Compose for Local Development",
        "details": "Context: Define a `docker-compose.yml` file for easy local development setup. Expected Files Modified: `docker-compose.yml`. Rules: Follow `.cursor/rules/docker.mdc`, `.cursor/rules/yaml.mdc`. Nuances: Define `backend` service using `backend.Dockerfile` context, map port 8000, mount `./backend/src`, `./data`, `./music`. Set necessary environment variables (use `.env` file ideally, but provide defaults like `SECRET_KEY`). Define `frontend` service (optional, can run `npm run dev` locally): use `node:alpine` image, mount `./frontend`, map port 5173, set command `npm run dev -- --host`. Define named volumes. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`docker-compose.yml`"
      },
      {
        "status": "todo",
        "description": "Makefiles: Setup Root Makefile and Backend Targets",
        "details": "Context: Create Makefiles for backend tasks and include them in the root Makefile. Expected Files Modified: `Makefile,docker/makefiles/backend.mk`. Rules: Follow `.cursor/rules/makefile.mdc`, `.cursor/rules/makefile_commands.mdc`. Nuances: Root `Makefile` should include `docker/makefiles/*.mk`. Define top-level `ci`, `lint`, `format`, `test` targets calling service-specific targets. `backend.mk`: Define `back-install` (using `uv`), `back-dev` (using `uvicorn --reload`), `back-lint` (using `uv run ruff check`), `back-format` (using `uv run ruff format`), `back-test` (using `uv run pytest`). Ensure commands run in `backend/` directory. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`Makefile,docker/makefiles/backend.mk`"
      },
      {
        "status": "todo",
        "description": "Makefiles: Setup Frontend, Tauri, and Docker Targets",
        "details": "Context: Create Makefiles for frontend, Tauri, and Docker operations. Expected Files Modified: `docker/makefiles/frontend.mk,docker/makefiles/tauri.mk,docker/makefiles/docker.mk,frontend/package.json`. Rules: Follow `.cursor/rules/makefile.mdc`, `.cursor/rules/makefile_commands.mdc`. Nuances: `frontend.mk`: Define `front-install` (`npm install`), `front-dev` (`npm run dev`), `front-build` (`npm run build`), `front-lint` (`npm run lint`), `front-format` (`npm run format`), `front-test` (`npm run test`). Ensure corresponding scripts exist in `frontend/package.json`. `tauri.mk`: Define `tauri-dev` (`npx tauri dev`), `tauri-build` (`npx tauri build`). Run commands in `frontend/`. `docker.mk`: Define `docker-build-prod`, `docker-up`, `docker-down`, `docker-logs`, `docker-rebuild` using `docker build` and `docker-compose`. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`docker/makefiles/frontend.mk,docker/makefiles/tauri.mk,docker/makefiles/docker.mk,frontend/package.json`",
        "rest": true
      },
      {
        "status": "todo",
        "description": "CI/CD: Update GitHub Workflows (Linters, Testers, Deploy)",
        "details": "Context: Update GitHub Actions workflows to accommodate the new SvelteKit frontend and use Make targets. Expected Files Modified: `.github/workflows/linters.yml,.github/workflows/deploy.yml`. Rules: Follow `.cursor/rules/yaml.mdc`. Nuances: `linters.yml`: Add/update `frontend-lint` job (setup Node, `npm install`, `make front-lint`). Add/update `frontend-test` job (setup Node, `npm install`, `make front-test`). Ensure backend jobs use `uv` and `make back-lint`/`make back-test`. Consider adding `tauri-build-check` job (`make tauri-build`). `deploy.yml`: Ensure trigger conditions are correct. Update Docker build step to use `docker/production.Dockerfile` path correctly. Ensure Docker Hub login and image tagging (`latest`, SHA) are correct. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`.github/workflows/linters.yml,.github/workflows/deploy.yml`"
      },
      {
        "status": "todo",
        "description": "Documentation: Update README.md and ARCHITECTURE.md",
        "details": "Context: Update project documentation to reflect the final architecture, tech stack (SvelteKit), and setup instructions. Expected Files Modified: `README.md,ARCHITECTURE.md`. Rules: Follow `.cursor/rules/md.mdc`. Nuances: `README.md`: Update overview, tech stack (SvelteKit, FastAPI, Tauri). Add setup instructions for backend (`uv`) and frontend (`npm`). Instructions for running dev (`make back-dev`, `make front-dev`, `make tauri-dev`). Build instructions (`make back-build`, `make front-build`, `make tauri-build`, `make docker-build-prod`). Running linters/tests (`make lint`, `make test`). Overview of structure. `ARCHITECTURE.md`: Ensure it precisely matches the final implemented architecture as generated in the initial step of this task. Update if any deviations occurred during implementation. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`README.md,ARCHITECTURE.md`"
      },
      {
        "status": "todo",
        "description": "Final Review, E2E Testing, and Refinements",
        "details": "Context: Perform end-to-end testing and final checks before considering the rewrite complete. Expected Files Modified: Potentially any file based on E2E findings. Nuances: Test Web version (secret key login, playback, scan, state persistence, responsiveness). Test Tauri app (launch, playback, scan, state persistence). Review code quality, clarity, adherence to rules. Refine UI/UX. Check configurations (`.env`, Docker, Tauri, Makefiles, CI). Audit dependencies (`uv`, `npm`). Run `make format lint test ci` final time. The AI assistant must not leave any comments in files. Execute `make ci` at the end and fix all warnings/errors.",
        "files_to_modify": "`./`",
        "rest": true
      }
    ]
  }
}
