{
  "Climb": "E4hN",
  "moves": [
    {
      "status": "todo",
      "description": "Refactor Frontend Dependencies, Remove Autoprefixer, and Add Uninstall Command",
      "details": "1. Create a new make target `front-npm-uninstall` in `docker/makefiles/frontend.mk`. This target should execute `cd $(FRONTEND_DIR) && npm uninstall $(ARGS)`. 2. Use the new make target to remove `@playwright/test` and `autoprefixer` from `frontend/package.json` devDependencies. Execute `make front-npm-uninstall ARGS=\"@playwright/test autoprefixer\"`. 3. Identify runtime dependencies currently in `devDependencies`: `bits-ui`, `clsx`, `mode-watcher`, `svelte-sonner`, `tailwind-merge`, `tailwind-variants`. For each of these, first uninstall them from `devDependencies` using `make front-npm-uninstall ARGS=\"<package-name>\"`. Then, install them into `dependencies` using `make front-npm-install ARGS=\"<package-name>\"`. Update `frontend/package.json` and `frontend/package-lock.json` accordingly. 4. Check `frontend/postcss.config.js`. If `autoprefixer` is configured as a plugin, remove its import and usage. The file should look like `export default { plugins: { tailwindcss: {} } };` or similar if only TailwindCSS remains. If `autoprefixer` is not present or the file doesn't exist/is structured differently without autoprefixer, no changes are needed for this step. 5. Execute `make ci` from the project root. Resolve any linting, formatting, testing, or build issues arising from these dependency changes to ensure the command passes successfully.",
      "rules_filepaths_to_follow": "`.cursor/rules/makefile.mdc,.cursor/rules/makefile_commands.mdc,.cursor/rules/json.mdc,.cursor/rules/javascript.mdc`",
      "filepaths_to_modify": "`docker/makefiles/frontend.mk,frontend/package.json,frontend/package-lock.json,frontend/postcss.config.js`"
    },
    {
      "status": "completed",
      "description": "Temporarily Remove End-to-End (E2E) Testing Infrastructure and Update ARCHITECTURE.md",
      "details": "Remove all current E2E testing files if they still exist, configurations, and related scripts/Makefile targets from the `frontend/e2e/` directory. This includes files like `frontend/e2e/**/*.test.ts`, `frontend/e2e/fixtures.ts`, and `frontend/playwright.config.ts`. The `test:e2e` script in `frontend/package.json` should be removed. The main `test` script in `frontend/package.json` should be updated to only run unit tests (`npm run test:unit -- --run`). Modify `ARCHITECTURE.md` to remove current E2E testing details from section 2 (Frontend Architecture - specifically `frontend/tests/` and `frontend/e2e/`) and add a new top-level section (e.g., Section 10) titled 'End-to-End Testing (Future)' stating that E2E tests will be reintroduced later, potentially in a root `mus/e2e/` directory, targeting the production Docker container. Ensure `make ci` passes.",
      "rules_filepaths_to_follow": "`.cursor/rules/json.mdc,.cursor/rules/typescript.mdc,.cursor/rules/makefile.mdc,.cursor/rules/md.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`frontend/e2e/,frontend/playwright.config.ts,frontend/package.json,docker/makefiles/frontend.mk,ARCHITECTURE.md`"
    },
    {
      "status": "todo",
      "description": "Refactor Track Listing: Remove Pagination from Backend and Frontend",
      "details": "Modify the backend to return a simple List[TrackDTO] for all tracks, removing PagedResponseDTO. Update the frontend to consume this simplified list. Ensure all related DTOs, schemas, repository methods, API endpoints, API client functions, data loading functions, and tests are updated accordingly. PagedResponseDTO should be completely removed from the backend codebase. Frontend code in `+layout.server.ts` and related components consuming track lists must be updated. Ensure `make ci` passes.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/typescript.mdc,.cursor/rules/svelte.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/persistence/sqlite_track_repository.py,backend/src/mus/infrastructure/api/routers/track_router.py,backend/src/mus/application/dtos/responses.py,backend/src/mus/application/dtos/__init__.py,backend/src/mus/infrastructure/api/schemas.py,backend/tests/api/test_track_api.py,backend/tests/persistence/test_sqlite_track_repository.py,frontend/src/lib/services/apiClient.ts,frontend/src/routes/(app)/+layout.server.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/routes/(app)/+page.svelte,frontend/src/routes/(app)/__tests__/layout.server.test.ts,frontend/src/lib/services/apiClient.test.ts`"
    },
    {
      "status": "todo",
      "description": "Implement Conditional CORS Middleware in Backend",
      "details": "Modify `backend/src/mus/main.py` to enable CORS middleware only if the `APP_ENV` environment variable is NOT set to 'production'. If `APP_ENV` is 'production', the CORS middleware should be omitted. Add integration tests (e.g., in `backend/tests/test_main_cors.py`) to verify CORS headers' presence or absence based on `APP_ENV`. Ensure `make ci` passes.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/main.py,backend/tests/test_main_cors.py`"
    },
    {
      "status": "todo",
      "description": "Implement Development Startup Process: DB Reset, Cover Cleaning, and Async Scan",
      "details": "Modify the `lifespan` context manager in `backend/src/mus/main.py`. If `APP_ENV` is not 'production': 1. Reset the database by dropping and recreating all tables using the existing async engine (`async with engine.begin() as conn: await conn.run_sync(SQLModel.metadata.drop_all)` then `create_all`). 2. Empty the `./data/covers` directory (e.g., using `shutil.rmtree` and `os.makedirs`). 3. Asynchronously initiate music scanning using `ScanTracksUseCase`, ensuring server startup is not blocked (e.g. using `asyncio.create_task`). Add tests for this conditional startup logic (e.g., in `backend/tests/test_main_startup.py`), including DB operations, directory cleaning, and async task creation. Ensure `make ci` passes.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/main.py,backend/tests/test_main_startup.py`"
    },
    {
      "status": "todo",
      "description": "Configure Music Directory via MUSIC_DIR Environment Variable",
      "details": "Modify `backend/src/mus/infrastructure/scanner/file_system_scanner.py` to use the `MUSIC_DIR` environment variable (read via `os.getenv('MUSIC_DIR', './music')`). If `MUSIC_DIR` is unset, it should default to `./music`. Ensure the scanner and related directory creation logic use this configured path. Update tests for `FileSystemScanner` (e.g., in `backend/tests/infrastructure/test_file_system_scanner.py`) to verify it respects `MUSIC_DIR` and the default. Ensure `make ci` passes.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/scanner/file_system_scanner.py,backend/tests/infrastructure/test_file_system_scanner.py`"
    }
  ]
}
