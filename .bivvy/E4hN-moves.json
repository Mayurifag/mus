{
  "Climb": "E4hN",
  "moves": [
    {
      "status": "completed",
      "description": "Temporarily Remove End-to-End (E2E) Testing Infrastructure and Update ARCHITECTURE.md",
      "details": "Remove all current E2E testing files if they still exist, configurations, and related scripts/Makefile targets from the `frontend/e2e/` directory. This includes files like `frontend/e2e/**/*.test.ts`, `frontend/e2e/fixtures.ts`, and `frontend/playwright.config.ts`. The `test:e2e` script in `frontend/package.json` should be removed. The main `test` script in `frontend/package.json` should be updated to only run unit tests (`npm run test:unit -- --run`). Modify `ARCHITECTURE.md` to remove current E2E testing details from section 2 (Frontend Architecture - specifically `frontend/tests/` and `frontend/e2e/`) and add a new top-level section (e.g., Section 10) titled 'End-to-End Testing (Future)' stating that E2E tests will be reintroduced later, potentially in a root `mus/e2e/` directory, targeting the production Docker container. Ensure `make ci` passes.",
      "rules_filepaths_to_follow": "`.cursor/rules/json.mdc,.cursor/rules/typescript.mdc,.cursor/rules/makefile.mdc,.cursor/rules/md.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`frontend/e2e/,frontend/playwright.config.ts,frontend/package.json,docker/makefiles/frontend.mk,ARCHITECTURE.md`"
    },
    {
      "status": "completed",
      "description": "Remove PostCSS Dependency, Configuration, and Documentation References",
      "details": "1. Uninstall the `postcss` package using the command `make front-npm-uninstall ARGS=\"postcss\"`. 2. Delete the `frontend/postcss.config.js` file if it exists. 3. Update documentation files `ARCHITECTURE.md` (e.g., section 2 Frontend Architecture, section 9 Key Technical Decisions if PostCSS was explicitly mentioned) and `README.md` (e.g., Tech Stack section) to remove references to PostCSS as an explicit part of the toolchain, assuming `@tailwindcss/vite` handles necessary PostCSS processing internally. 4. Update the `E4hN-climb.md` PRD file to reflect the removal of PostCSS from technical requirements and relevant file lists. 5. Verify `frontend/src/app.css` (and `frontend/tailwind.config.js` if it's a JS file) do not contain any non-standard PostCSS configurations or directives that would break after its removal (standard `@tailwind` directives are fine). 6. Execute `make ci` from the project root. Resolve any linting, formatting, testing, or build issues arising from these changes to ensure the command passes successfully. Testing: A successful `make ci` (including frontend build, lint, and unit tests) is required.",
      "rules_filepaths_to_follow": "`.cursor/rules/makefile.mdc,.cursor/rules/makefile_commands.mdc,.cursor/rules/json.mdc,.cursor/rules/javascript.mdc,.cursor/rules/css.mdc,.cursor/rules/md.mdc`",
      "filepaths_to_modify": "`frontend/package.json,frontend/package-lock.json,frontend/postcss.config.js,ARCHITECTURE.md,README.md,.bivvy/E4hN-climb.md,frontend/src/app.css,frontend/tailwind.config.js`"
    },
    {
      "status": "completed",
      "description": "Refactor Frontend Dependencies, Remove Autoprefixer, and Add Uninstall Command",
      "details": "1. Ensure the `front-npm-uninstall` make target exists in `docker/makefiles/frontend.mk` (it should execute `cd $(FRONTEND_DIR) && npm uninstall $(ARGS)`). If not, create it. 2. Use the make target to attempt removal of `@playwright/test` and `autoprefixer` from `frontend/package.json` devDependencies by executing `make front-npm-uninstall ARGS=\"@playwright/test autoprefixer\"`. This is a cleanup step; these packages might not be present. 3. Identify runtime dependencies currently in `devDependencies`: `bits-ui`, `clsx`, `mode-watcher`, `svelte-sonner`, `tailwind-merge`, `tailwind-variants`. For each of these, first uninstall them from `devDependencies` using `make front-npm-uninstall ARGS=\"<package-name>\"`. Then, install them into `dependencies` using `make front-npm-install ARGS=\"<package-name>\"`. Update `frontend/package.json` and `frontend/package-lock.json` accordingly. 4. Execute `make ci` from the project root. Resolve any linting, formatting, testing, or build issues arising from these dependency changes to ensure the command passes successfully. Testing: A successful `make ci` (including frontend build, lint, and unit tests) is required.",
      "rules_filepaths_to_follow": "`.cursor/rules/makefile.mdc,.cursor/rules/makefile_commands.mdc,.cursor/rules/json.mdc`",
      "filepaths_to_modify": "`docker/makefiles/frontend.mk,frontend/package.json,frontend/package-lock.json`"
    },
    {
      "status": "completed",
      "description": "Refactor Track Listing: Remove Pagination from Backend and Frontend",
      "details": "Modify the backend to return a simple List[TrackDTO] for all tracks, removing PagedResponseDTO. Update the frontend to consume this simplified list. Ensure all related DTOs, schemas, repository methods, API endpoints, API client functions, data loading functions, and tests are updated accordingly. PagedResponseDTO should be completely removed from the backend codebase. Frontend code in `+layout.server.ts` and related components consuming track lists must be updated. Ensure `make ci` passes. Testing: Add/update unit and integration tests for backend repository methods (`get_all`), API endpoint (`GET /api/v1/tracks`), and DTO removal. For frontend, update tests for `apiClient.ts` (`fetchTracks`) and `+layout.server.ts` (if applicable) to handle `List[TrackDTO]`.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/typescript.mdc,.cursor/rules/svelte.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/persistence/sqlite_track_repository.py,backend/src/mus/infrastructure/api/routers/track_router.py,backend/src/mus/application/dtos/responses.py,backend/src/mus/application/dtos/__init__.py,backend/src/mus/infrastructure/api/schemas.py,backend/tests/api/test_track_api.py,backend/tests/persistence/test_sqlite_track_repository.py,frontend/src/lib/services/apiClient.ts,frontend/src/routes/(app)/+layout.server.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/routes/(app)/+page.svelte,frontend/src/routes/(app)/__tests__/layout.server.test.ts,frontend/src/lib/services/apiClient.test.ts`"
    },
    {
      "status": "completed",
      "description": "Implement Conditional CORS Middleware in Backend",
      "details": "Modify `backend/src/mus/main.py` to enable CORS middleware only if the `APP_ENV` environment variable is NOT set to 'production'. If `APP_ENV` is 'production', the CORS middleware should be omitted. Ensure `make ci` passes. Testing: Add integration tests (e.g., in `backend/tests/test_main_cors.py`) to verify CORS headers' presence (allowing `http://localhost:5173`) or absence based on `APP_ENV` value via OPTIONS requests.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/main.py,backend/tests/test_main_cors.py`"
    },
    {
      "status": "completed",
      "description": "Implement Unconditional Development Startup Process: DB Reset, Cover Cleaning, and Async Scan",
      "details": "Modify the `lifespan` context manager in `backend/src/mus/main.py` to perform startup operations unconditionally on every application start. This enhances development ease by ensuring a consistent, clean environment. The operations are: 1. Database Reset: Drop all tables using `SQLModel.metadata.drop_all` and then recreate all tables using `SQLModel.metadata.create_all`. This must be done via the asynchronous engine (`async with actual_engine.begin() as conn_lifespan: await conn_lifespan.run_sync(SQLModel.metadata.drop_all); await conn_lifespan.run_sync(SQLModel.metadata.create_all)`). 2. Cover Directory Cleaning: Empty the `./data/covers` directory. Use `shutil.rmtree(Path(\"./data/covers\"), ignore_errors=True)` followed by `os.makedirs(Path(\"./data/covers\"), exist_ok=True)`. 3. Asynchronous Music Scan: Initiate music scanning by calling `ScanTracksUseCase.scan_directory()` asynchronously. This must not block server startup. Use `asyncio.create_task` to run a helper async function. This helper function will obtain an `AsyncSession` using `get_session_generator`, instantiate `ScanTracksUseCase` with its necessary dependencies (repositories, scanner, processor), and then call the `scan_directory` method. Ensure proper session management within this helper. Testing: Update tests in `backend/tests/test_main_startup.py` to verify these operations occur unconditionally on every startup. This involves patching `src.mus.main.actual_engine.begin` (and its `run_sync`), `src.mus.main.SQLModel.metadata.drop_all`, `src.mus.main.SQLModel.metadata.create_all`, `src.mus.main.shutil.rmtree`, `src.mus.main.os.makedirs`, `src.mus.main.Path`, `src.mus.main.ScanTracksUseCase` (constructor), and `src.mus.main.asyncio.create_task`. Instantiate `TestClient(actual_app)` to trigger the lifespan events and assert that the mocked functions are called as expected. Include a test case that sets `APP_ENV=production` (via a fixture like `app_env_prod`) to confirm the operations still run. Ensure `make ci` passes. Example test structure for `backend/tests/test_main_startup.py`: `import pytest, asyncio, os, shutil; from pathlib import Path; from unittest.mock import patch, AsyncMock, MagicMock; from fastapi.testclient import TestClient; from sqlmodel import SQLModel; from src.mus.main import app as actual_app; from src.mus.infrastructure.database import engine as actual_engine; @pytest.mark.asyncio async def test_startup_process_runs_unconditionally(): mock_engine_begin_conn = AsyncMock(); mock_engine_begin_conn.__aenter__.return_value = mock_engine_begin_conn; mock_engine_begin_conn.run_sync = AsyncMock(); mock_actual_engine_begin = MagicMock(return_value=mock_engine_begin_conn); mock_scan_use_case_instance = AsyncMock(); mock_scan_use_case_instance.scan_directory = AsyncMock(); with patch(\"src.mus.main.actual_engine.begin\", new=mock_actual_engine_begin), patch(\"src.mus.main.SQLModel.metadata.drop_all\") as mock_sql_drop_all, patch(\"src.mus.main.SQLModel.metadata.create_all\") as mock_sql_create_all, patch(\"src.mus.main.shutil.rmtree\") as mock_shutil_rmtree, patch(\"src.mus.main.os.makedirs\") as mock_os_makedirs, patch(\"src.mus.main.Path\") as mock_path_constructor, patch(\"src.mus.main.ScanTracksUseCase\", return_value=mock_scan_use_case_instance) as MockScanTracksUseCaseConstructor, patch(\"src.mus.main.asyncio.create_task\") as mock_asyncio_create_task: mock_covers_dir_path_instance = MagicMock(spec=Path); mock_path_constructor.return_value = mock_covers_dir_path_instance; with TestClient(actual_app) as client: client.get(\"/api\"); mock_actual_engine_begin.assert_called_once(); mock_engine_begin_conn.run_sync.assert_any_call(mock_sql_drop_all); mock_engine_begin_conn.run_sync.assert_any_call(mock_sql_create_all); mock_path_constructor.assert_called_with(\"./data/covers\"); mock_shutil_rmtree.assert_called_once_with(mock_covers_dir_path_instance, ignore_errors=True); mock_os_makedirs.assert_called_once_with(mock_covers_dir_path_instance, exist_ok=True); MockScanTracksUseCaseConstructor.assert_called_once(); mock_asyncio_create_task.assert_called_once(); mock_scan_use_case_instance.scan_directory.assert_called_once()`",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/main.py,backend/tests/test_main_startup.py`"
    },
    {
      "status": "todo",
      "description": "Configure Music Directory via MUSIC_DIR Environment Variable",
      "details": "Modify `backend/src/mus/infrastructure/scanner/file_system_scanner.py` to use the `MUSIC_DIR` environment variable (read via `os.getenv('MUSIC_DIR', './music')`). If `MUSIC_DIR` is unset, it should default to `./music`. Ensure the scanner and related directory creation logic use this configured path. Ensure `make ci` passes. Testing: Update tests for `FileSystemScanner` (e.g., in `backend/tests/infrastructure/test_file_system_scanner.py`) to verify it respects `MUSIC_DIR` and the default.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/src/mus/infrastructure/scanner/file_system_scanner.py,backend/tests/infrastructure/test_file_system_scanner.py`"
    }
  ]
}
