{
  "Climb": "fR7b",
  "moves": [
    {
      "status": "complete",
      "description": "Remove isLoading state from trackStore and TrackList component.",
      "details": "Modify `frontend/src/lib/stores/trackStore.ts` to remove `isLoading` from `TrackStoreState` and `initialState`. Update `frontend/src/lib/components/domain/TrackList.svelte` to remove the `isLoading` prop and its conditional rendering logic, relying on `tracks.length` for empty states. Update tests in `frontend/src/lib/components/domain/TrackList.svelte.test.ts` and `frontend/src/lib/stores/trackStore.test.ts`.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/stores/trackStore.ts,frontend/src/lib/components/domain/TrackList.svelte,frontend/src/lib/components/domain/TrackList.svelte.test.ts,frontend/src/lib/stores/trackStore.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Adjust currentTrackIndex nullability logic in trackStore.",
      "details": "Review and modify `frontend/src/lib/stores/trackStore.ts`. Ensure `currentTrackIndex` is `null` if `tracks` array is empty. If `tracks` is not empty, ensure `currentTrackIndex` defaults to `0` or a restored valid index if no prior state dictates otherwise. Specifically, update `setCurrentTrackIndex` to handle empty `tracks` by setting `currentTrackIndex` to `null`, and for non-empty `tracks`, ensure `index` is clamped to a valid range (e.g., defaulting to `0` if `index` is out of bounds). Update tests in `frontend/src/lib/stores/trackStore.test.ts`.",
      "rules_filepaths_to_follow": "`.cursor/rules/typescript.mdc,.cursor/rules/svelte.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/stores/trackStore.ts,frontend/src/lib/stores/trackStore.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Refactor reactive assignment in TrackList.svelte.",
      "details": "Modify `frontend/src/lib/components/domain/TrackList.svelte`: delete the line `$: currentTrackIndex = $trackStore.currentTrackIndex;`. Update all reactive dependencies and logic that used the local `currentTrackIndex` to directly use `$trackStore.currentTrackIndex`. Update tests in `frontend/src/lib/components/domain/TrackList.svelte.test.ts` if impacted.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/components/domain/TrackList.svelte,frontend/src/lib/components/domain/TrackList.svelte.test.ts`",
      "rest": "false"
    },
    {
      "status": "complete",
      "description": "Modify auto-scroll behavior for initial page load.",
      "details": "Remove the existing auto-scroll reactive block from `frontend/src/lib/components/domain/TrackList.svelte`. Add new logic to `frontend/src/routes/(app)/+layout.svelte`. This logic should use a reactive statement (`$:`) depending on `browser`, `$trackStore.currentTrackIndex`, `$trackStore.tracks.length`, and an `initialScrollDone` flag (set to `false` initially, then `true` after first scroll). Inside this block, if conditions are met, `await tick()`, then get the track element by ID `track-item-{currentTrack.id}` and call `scrollIntoView({ behavior: \"auto\", block: \"center\" })`. Update tests in `frontend/src/routes/(app)/__tests__/layout.test.ts` and `frontend/src/lib/components/domain/TrackList.svelte.test.ts`.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/components/domain/TrackList.svelte,frontend/src/routes/(app)/+layout.svelte,frontend/src/routes/(app)/__tests__/layout.test.ts,frontend/src/lib/components/domain/TrackList.svelte.test.ts`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Refactor player state saving mechanisms and add backend logging.",
      "details": "In `frontend/src/routes/(app)/+layout.svelte`: create a common function `constructPlayerStateDTO()` that builds the `PlayerState` DTO from `$playerStore` values. Ensure `debouncedSavePlayerState` uses this DTO and calls `apiClient.savePlayerStateAsync(dto)`. Ensure `sendPlayerStateBeacon` uses this DTO; the `navigator.sendBeacon` call will remain in `+layout.svelte`, constructing its URL using `API_BASE_URL` from `apiClient.ts`. In `frontend/src/lib/services/apiClient.ts`, ensure `savePlayerStateAsync` correctly posts the DTO. In `backend/src/mus/infrastructure/api/routers/player_router.py`, modify `save_player_state` endpoint to log the received `PlayerStateDTO` using `logger.info(f\"Received player state: {player_state.model_dump_json(indent=2)}\")`. Update tests in `frontend/src/routes/(app)/__tests__/layout.test.ts` and `frontend/src/lib/services/apiClient.test.ts`.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/python.mdc`",
      "filepaths_to_modify": "`frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/services/apiClient.ts,backend/src/mus/infrastructure/api/routers/player_router.py,frontend/src/routes/(app)/__tests__/layout.test.ts,frontend/src/lib/services/apiClient.test.ts`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Final review and CI checks.",
      "details": "Run `make ci` to execute all linters, formatters, and tests. Ensure all checks pass without any errors or warnings.",
      "rules_filepaths_to_follow": "`.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`./`",
      "rest": "true"
    }
  ]
}
