{
  "Climb": "FrR3",
  "moves": [
    {
      "status": "complete",
      "description": "Backend: Update PlayerState Entity/DTO/Repository; Remove Manual Scan; Implement Periodic Background Scan Worker & Basic SSE Endpoint; Adapt Scan Use Case",
      "details": "This move consolidates several completed backend tasks. 1. PlayerState Entity/DTO/Repository Update: `is_shuffle: bool` and `is_repeat: bool` added to `backend/src/mus/domain/entities/player_state.py`, `backend/src/mus/application/dtos/player_state.py`, and handled in `backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py`. Associated tests in `backend/tests/persistence/test_sqlite_player_state_repository.py` and `backend/tests/api/test_player_state_api.py` are updated. 2. Remove Manual Scan Functionality: `backend/src/mus/infrastructure/api/routers/scan_router.py` and `backend/tests/api/test_scan_api.py` deleted; router removed from `main.py`. 3. Implement Basic SSE Endpoint & Broadcaster: `backend/src/mus/infrastructure/api/sse_handler.py` created with client management, SSE endpoint, and `broadcast_sse_event` utility. SSE router added to `main.py`. (Full testing for sse_handler is a separate move). 4. Implement Periodic Background Scanner Worker: `backend/src/mus/infrastructure/tasks/background_scanner.py` created with `PeriodicScanner` class. 5. `main.py` `lifespan` Refactor: Modified to retain DB/cover cleaning, then instantiate and start `PeriodicScanner`. Scanner is stopped on shutdown. Tests in `backend/tests/test_main_startup.py` updated. 6. `ScanTracksUseCase` Adaptation: Modified in `backend/src/mus/application/use_cases/scan_tracks_use_case.py` to call `broadcast_sse_event`. Tests in `backend/tests/application/test_scan_tracks_use_case.py` updated.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`backend/src/mus/domain/entities/player_state.py,backend/src/mus/application/dtos/player_state.py,backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py,backend/tests/persistence/test_sqlite_player_state_repository.py,backend/tests/api/test_player_state_api.py,backend/src/mus/main.py,backend/src/mus/infrastructure/api/sse_handler.py,backend/src/mus/application/use_cases/scan_tracks_use_case.py,backend/tests/application/test_scan_tracks_use_case.py,backend/tests/test_main_startup.py,backend/src/mus/infrastructure/tasks/background_scanner.py,backend/tests/infrastructure/tasks/test_background_scanner.py`",
      "rest": "skip"
    },
    {
      "status": "complete",
      "description": "Frontend: PWA Setup",
      "details": "Implement PWA basics. 1. PWA Setup: `frontend/static/manifest.json` configured with app details and icons. `frontend/src/service-worker.ts` uses `$service-worker.build` and `$service-worker.files` for caching, including `/` route. Service worker registered in `frontend/src/hooks.client.ts`. `frontend/src/app.html` links manifest, sets theme color, apple-touch-icon. This part is verified as complete based on file analysis.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/json.mdc`",
      "filepaths_to_modify": "`frontend/static/manifest.json,frontend/static/images/icon-192.svg,frontend/static/images/icon-512.svg,frontend/src/service-worker.ts,frontend/src/app.html,frontend/src/hooks.client.ts`",
      "rest": "skip"
    },
    {
      "status": "complete",
      "description": "Frontend: Implement SSE-Driven Track Updates & Generic Notifications; Backend: Refactor SSE Event Structure",
      "details": "Backend: Refactor SSE to use a single, generic event payload (flat JSON: `message_to_show`, `message_level`, `action_key`, `action_payload`). Update `ScanTracksUseCase` in `backend/src/mus/application/use_cases/scan_tracks_use_case.py` to generate these events with appropriate messages based on scan results (e.g., 'New track: {Artist} - {Title}', 'X new tracks added.', 'Y tracks updated.', 'Music library updated.', or null message if no changes). `message_level` will be 'success' for changes, null otherwise. `action_key` will be 'reload_tracks' for changes, null otherwise. Update `backend/src/mus/infrastructure/api/sse_handler.py` to send this flat payload. Write/update tests in `backend/tests/application/test_scan_tracks_use_case.py` to verify new SSE payload generation. Frontend: Create `frontend/src/lib/services/eventHandlerService.ts`. This service will contain `initEventHandlerService()` to call `apiClient.connectTrackUpdateEvents(handleMusEvent)`, and `handleMusEvent(payload)` which parses the flat SSE payload. If `payload.message_to_show` is present, it triggers a `svelte-sonner` toast with the message and level. If `payload.action_key === 'reload_tracks'`, it calls `apiClient.fetchTracks()` then `trackStore.setTracks()`. Unknown actions are logged. Modify `frontend/src/routes/(app)/+layout.svelte` to call `initEventHandlerService()` in `onMount`. Modify `frontend/src/routes/(app)/+page.svelte` to remove the 'Scan Music Library' button and all related local state and logic (`isScanning`, `scanMessage`, `handleScan` function). Write tests for `eventHandlerService.ts` (mocking `apiClient`, `trackStore`, `toast`), for `+page.svelte` (verifying UI cleanup), and for `+layout.svelte` (verifying service initialization).",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/typescript.mdc,.cursor/rules/svelte.mdc`",
      "filepaths_to_modify": "`backend/src/mus/application/use_cases/scan_tracks_use_case.py,backend/src/mus/infrastructure/api/sse_handler.py,backend/tests/application/test_scan_tracks_use_case.py,frontend/src/lib/services/eventHandlerService.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/routes/(app)/+page.svelte,frontend/src/lib/services/eventHandlerService.test.ts,frontend/src/routes/(app)/+page.svelte.test.ts,frontend/src/routes/(app)/+layout.svelte.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Core Setup - Dependencies (xior, coverage), Encapsulated xior API Client, Coverage Config, CSS/Icon Verification",
      "details": "Perform foundational frontend setup and refactoring. 1. Dependencies: RUN `make front-npm-install ARGS=xior`, RUN `make front-npm-dev-install ARGS=@vitest/coverage-v8`. 2. `apiClient.ts` Refactor with xior: Entirely refactor `frontend/src/lib/services/apiClient.ts`. Instantiate and export a single, global `xior` instance. Configure its `baseURL` (dev: `http://localhost:8000/api/v1`, prod: `/api/v1`). All API functions (`fetchTracks`, `fetchPlayerState`, `savePlayerState`, `getStreamUrl`) must use this `xior` instance and primarily return/handle `response.data`. Add basic console error logging for failed API requests within this file. No other frontend files should make direct `fetch` calls. Add a new function `connectTrackUpdateEvents(onMessageCallback: (eventData: any) => void): EventSource` that establishes an `EventSource` connection to the backend's SSE endpoint (`/api/v1/events/track-updates`), parses `JSON.parse(event.data)`, and calls `onMessageCallback` with the parsed event data. It should handle basic error/reconnection logic for the EventSource. Write comprehensive unit tests for all `apiClient.ts` functions, mocking `xior` and `EventSource` (create/update `frontend/src/lib/services/apiClient.test.ts`). 3. Vite & Coverage: Update `frontend/vite.config.ts` for Vitest coverage: `test: { coverage: { provider: 'v8', reporter: ['text', 'json', 'html'], include: ['src/lib/**/*.{ts,svelte}', 'src/routes/**/*.{ts,svelte}'], exclude: ['src/**/*.test.{ts,svelte}', 'src/**/*.spec.{ts,svelte}', 'src/**/__tests__', 'src/app.d.ts', 'src/vite-env.d.ts'] } }`. Add `\"test:coverage\": \"vitest run --coverage\"` to `frontend/package.json` scripts. 4. CSS & Icon Verification: Review `frontend/src/app.css`, `frontend/tailwind.config.js`. Solidify 3-color dark theme via CSS variables. Ensure Tailwind utilities and Shadcn components use these correctly. Verify `lucide-svelte` icons render.",
      "rules_filepaths_to_follow": "`.cursor/rules/json.mdc,.cursor/rules/typescript.mdc,.cursor/rules/svelte.mdc,.cursor/rules/css.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`frontend/package.json,frontend/vite.config.ts,frontend/src/lib/services/apiClient.ts,frontend/src/lib/services/apiClient.test.ts,frontend/src/app.css,frontend/tailwind.config.js`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Implement Main Application Layout Shell (Desktop & Mobile)",
      "details": "This move focuses on building the main application shell using Svelte and Tailwind CSS, ensuring a responsive design for desktop and mobile. Utilize Shadcn-Svelte components like `Sheet` and `Button`. Minimal custom CSS is paramount; rely on Tailwind utility classes and CSS variables defined in `app.css`. 1. **`frontend/src/routes/(app)/+layout.svelte` Modifications**: Implement a flex column layout filling the screen (e.g., `<div class=\"flex flex-col h-screen\">`). Below any potential global header and above `PlayerFooter.svelte`, create a main content area using `<main class=\"flex flex-1 overflow-hidden\">`. Wrap the `<slot />` in a `<div class=\"flex-1 overflow-y-auto p-4\">`. Place the `<RightSidebar />` component alongside the slot container, visible on medium screens and up (e.g., `<RightSidebar class=\"hidden md:block shrink-0\" />`). For mobile, integrate a Shadcn `Sheet` (import `Sheet`, `SheetContent`, `SheetTrigger`, etc. from `$lib/components/ui/sheet/index.js`). Manage `Sheet` open/closed state using `bits-ui`'s builder pattern. The `Sheet.Trigger` will be a mobile menu `Button` in `PlayerFooter.svelte`. Inside `<SheetContent side=\"left\">` (or `right`), render `<RightSidebar />`. Optionally include `<SheetHeader>` with `<SheetTitle>` and `<SheetClose />`. Ensure `PlayerFooter` is fixed at the bottom, and the main content area uses flex properties or `h-[calc(100vh-theme(spacing.20))]` (if footer is `h-20`) to fill space. 2. **`frontend/src/lib/components/layout/RightSidebar.svelte` (New Component)**: Create this file. Use `<script lang=\"ts\">`. Root element: `<aside>`. Apply Tailwind: `p-4 w-64 bg-muted text-foreground`. It will be controlled by `+layout.svelte` for visibility (`hidden md:block`). Content: Placeholder text like `<p>Library Actions</p>`. 3. **`frontend/src/lib/components/layout/PlayerFooter.svelte` (Modifications for Mobile Menu Trigger)**: Import `Button` and `Menu` icon (`lucide-svelte`). Integrate `Sheet.Trigger` from `bits-ui` (via `shadcn-svelte/sheet`), styled as a `Button`. Example: `<Sheet.Trigger asChild let:builder> <Button builders={[builder]} variant=\"ghost\" size=\"icon\" class=\"md:hidden\" aria-label=\"Open menu\"> <Menu class=\"h-5 w-5\" /> </Button> </Sheet.Trigger>`. This button should be visible only on mobile (`md:hidden`). 4. **Testing Requirements**: For `+layout.svelte` tests: Verify main layout structure (slot, sidebar, footer). Desktop: `RightSidebar` visible, mobile menu button hidden. Mobile: `RightSidebar` hidden in main flow, mobile menu button visible. Test `Sheet` interaction (open, content visible, close). For `RightSidebar.svelte` tests: Verify placeholder content and default styling classes. For `PlayerFooter.svelte` (mobile menu button aspects): Verify button rendering, visibility classes, and `aria-label`. Ensure all code adheres to `.augment-guidelines`, uses Tailwind CSS, and avoids custom CSS. Ensure graceful error handling for component interactions and state changes. Add specific tests for responsive behavior: e.g., programmatically change viewport in tests if possible, or ensure CSS classes for responsive visibility (`md:hidden`, `md:block`) are correctly applied and asserted. Verify that the main content area correctly resizes when the `PlayerFooter` is present.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc`",
      "filepaths_to_modify": "`frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/components/layout/RightSidebar.svelte,frontend/src/lib/components/layout/PlayerFooter.svelte,frontend/src/routes/(app)/__tests__/layout.test.ts,frontend/src/lib/components/layout/RightSidebar.test.ts,frontend/src/lib/components/layout/PlayerFooter.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Refactor Stores (Player, Track) for New Features, Dynamic Tab Title, Initial State",
      "details": "This move overhauls Svelte stores for new player functionalities (shuffle, repeat), play history, dynamic tab titles, and correct state initialization. 1. **`frontend/src/lib/stores/playerStore.ts` Modifications**: Update `PlayerStoreState` (in `frontend/src/lib/types/index.ts` or inline) and `initialState` to include `is_shuffle: boolean` (default `false`) and `is_repeat: boolean` (default `false`). Add actions: `toggleShuffle()` and `toggleRepeat()` to toggle these states. Ensure `setTrack(track: Track)` resets `currentTime` to 0 and updates `duration`. 2. **`frontend/src/lib/stores/trackStore.ts` Modifications**: Update `TrackStoreState` to include `playHistory: Track[]` (initially empty). Update `setTracks(tracks: Track[])`: if `currentTrackIndex` valid, try to find same track ID in new list and update index, else reset index. `playTrack(targetIndex: number)`: updates `$playerStore.currentTrack`, `state.currentTrackIndex`, adds previous track to `playHistory`, calls `$playerStore.play()`. `nextTrack()`: Default (no shuffle/repeat): advances/loops, updates player/index, plays. Shuffle (`$playerStore.is_shuffle`): selects random non-current track, updates player/index, adds current to history, plays. Repeat Single (`$playerStore.is_repeat` and track ended): handled by `audio.onended` in `+layout.svelte`; if user clicks next, break repeat and advance. `previousTrack()`: Default (no shuffle): previous/loops, updates player/index, plays. Shuffle: pops from `playHistory`; if empty, plays `currentTrackIndex - 1` (or wraps), updates player/index, plays. 3. **`frontend/src/routes/(app)/+layout.svelte` (Initial State & Tab Title)**: In `onMount`, after `trackStore.setTracks(data.tracks)`: If `data.playerState` exists, set `$playerStore.is_shuffle = data.playerState.is_shuffle;`, `$playerStore.is_repeat = data.playerState.is_repeat;`. If `data.playerState.current_track_id` valid, find track in `data.tracks`, call `trackStore.setCurrentTrackIndex(foundIndex)`, then `playerStore.setCurrentTime(data.playerState.progress_seconds)`. If no `data.playerState` or no `current_track_id`, and `data.tracks` not empty, call `trackStore.setCurrentTrackIndex(0)` and `playerStore.pause()`. Dynamic Tab Title: Use reactive statement to set document.title to 'Artist - Title' format when track is loaded, or 'Mus' otherwise (import `browser` from `'$app/environment'`). 4. **`frontend/src/lib/types/index.ts` Updates**: Update `PlayerStateDTO` (if used for DTO construction) and `PlayerStoreState` for `is_shuffle`, `is_repeat`. Update `TrackStoreState` for `playHistory`. 5. **Testing Requirements**: `playerStore.ts`: Test `toggleShuffle()`, `toggleRepeat()`. Test `setTrack` resets `currentTime`. `trackStore.ts`: Test `setTracks()` with `currentTrackIndex` updates. Test `playTrack()` (index, player state, history). Test `nextTrack()` (default, shuffle, repeat interaction). Test `previousTrack()` (default, shuffle with/without history). `+layout.svelte` (Initialization & Tab Title): Mock `data`, verify stores initialized correctly. Verify `document.title` updates. Ensure graceful error handling for store operations.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/stores/playerStore.ts,frontend/src/lib/stores/trackStore.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/types/index.ts,frontend/src/lib/stores/playerStore.test.ts,frontend/src/lib/stores/trackStore.test.ts,frontend/src/routes/(app)/__tests__/layout.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Implement/Enhance TrackList and Interactive TrackItem Components",
      "details": "This move enhances track display components for better user interaction and visual feedback. 1. **`frontend/src/lib/components/domain/TrackItem.svelte` Enhancements**: Conditionally render an interactive progress bar (Shadcn Svelte `Slider` or custom `div`) if `isSelected` AND `$playerStore.isPlaying`. If custom `div`, its width dynamically set via `($playerStore.currentTime / $playerStore.duration) * 100%`. Style with Tailwind (background for track, accent for fill). Ensure clear visual distinction for the active playing track. 2. **`frontend/src/lib/components/domain/TrackList.svelte` Enhancements**: When `$trackStore.currentTrackIndex` changes (and not null), auto-scroll the corresponding `TrackItem` into view. In `#each` block, assign unique ID e.g., `id=\"track-item-{$track.id}\"`. Use reactive `$: if (browser && $trackStore.currentTrackIndex !== null) { const el = document.getElementById(`track-item-${$trackStore.tracks[$trackStore.currentTrackIndex].id}`); el?.scrollIntoView({ behavior: 'smooth', block: 'nearest' }); }`. Ensure accessibility (keyboard navigation, focus management). 3. **`frontend/src/routes/(app)/+page.svelte` Modifications**: Ensure `TrackList` correctly embedded and receives `tracks`. No direct changes for progress bar or scroll-to-active expected here. 4. **Testing Requirements**: `TrackItem.svelte` Tests: Verify progress bar renders only when selected AND playing. If custom div, verify width updates. Verify active track visual indicators. `TrackList.svelte` Tests: Mock `$trackStore.currentTrackIndex` and tracks. Verify `scrollIntoView` is called on correct `TrackItem` when `currentTrackIndex` changes. Test edge cases (empty list, null index). Ensure graceful error handling if elements are not found during scroll operation.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/components/domain/TrackItem.svelte,frontend/src/lib/components/domain/TrackList.svelte,frontend/src/routes/(app)/+page.svelte,frontend/src/lib/components/domain/TrackItem.svelte.test.ts,frontend/src/lib/components/domain/TrackList.svelte.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Implement Full PlayerFooter, Audio Logic Enhancements, and Visual Volume Feedback",
      "details": "This move completes `PlayerFooter.svelte` with shuffle/repeat controls, visual volume feedback, and enhances audio logic in `+layout.svelte`. 1. **`frontend/src/lib/components/layout/PlayerFooter.svelte` Enhancements**: Visual Volume Feedback: On volume change, display temporary numeric percentage (e.g., \"75%\") near volume slider. Use local reactive vars (`showVolumeFeedback: boolean`, `volumeFeedbackValue: number`), update on `$playerStore.volume` change, try to use library classes and ways, use `context7` mcp for slider documentation. Shuffle Button: Add `Button` with `Shuffle` icon (`lucide-svelte`). Appearance changes if `$playerStore.is_shuffle` is true. `on:click` calls `playerStore.toggleShuffle()`. Add `aria-label=\"Toggle Shuffle\"` and `aria-pressed={$playerStore.is_shuffle}`. Repeat Button: Add `Button` with `Repeat` or `Repeat1` icon. Appearance changes if `$playerStore.is_repeat` is true. `on:click` calls `playerStore.toggleRepeat()`. Add `aria-label=\"Toggle Repeat\"` and `aria-pressed={$playerStore.is_repeat}`. Mobile Menu Button: Confirm `Menu` button for mobile sidebar `Sheet` is present and styled (`md:hidden`). Styling: Ensure sliders use accent color. Group buttons logically. 2. **`frontend/src/routes/(app)/+layout.svelte` Audio Logic Enhancements**: `on:ended` on `<audio>`: If `$playerStore.is_repeat`, call `audio.play()`. Else, call `trackStore.nextTrack()`. Error Handling: Ensure robust error handling for `audio.play()` calls (e.g., pause player, log error). 3. **Testing Requirements**: `PlayerFooter.svelte` Tests: Visual Volume Feedback: Verify appearance/disappearance, content reflects volume. Shuffle Button: Test icon change, `toggleShuffle` call, ARIA attributes. Repeat Button: Test icon change, `toggleRepeat` call, ARIA attributes. Sliders: Verify accent color usage. `+layout.svelte` (Audio Event Handler Tests): Mock `<audio>` and events. Test `on:ended` logic for repeat true/false. Test `audio.play()` error handling. Ensure graceful error handling for UI interactions.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/components/layout/PlayerFooter.svelte,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/components/layout/PlayerFooter.svelte.test.ts,frontend/src/routes/(app)/__tests__/layout.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Implement Player State Persistence (Debounced API Calls with xior & Beacon API)",
      "details": "This move implements robust player state saving to backend. 0. Add CORS, here is error text: Access to fetch at 'http://localhost:8000/api/v1/events/track-updates' from origin 'http://localhost:5173' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. 1. **PlayerState DTO Construction**: Ensure `PlayerStateDTO` (in `frontend/src/lib/types/index.ts` or via utility) includes `current_track_id`, `progress_seconds`, `volume_level`, `is_muted`, `is_shuffle` (from `$playerStore.is_shuffle`), and `is_repeat` (from `$playerStore.is_repeat`). 2. **Debounced Save Logic (in `frontend/src/routes/(app)/+layout.svelte`)**: Update `debouncedSavePlayerState` to construct full `PlayerStateDTO` including new shuffle/repeat states. Use `apiClient.savePlayerState(playerStateDto)`. Trigger reactively on changes to `$playerStore.currentTrack`, `currentTime`, `volume`, `isMuted`, `is_shuffle`, `is_repeat`. 3. **`navigator.sendBeacon` on Page Unload (in `frontend/src/routes/(app)/+layout.svelte`)**: Add `beforeunload` and `visibilitychange` (for `document.visibilityState === 'hidden'`) listeners. Handler constructs full `PlayerStateDTO` from `$playerStore` and calls `navigator.sendBeacon(\"/api/v1/player/state\", JSON.stringify(playerStateDto))`. Ensure correct URL path. Cancel pending `debouncedSavePlayerState` if `sendBeacon` is used. 4. **`frontend/src/lib/services/apiClient.ts` (Confirmation)**: Verify `savePlayerState` POSTs DTO to `/player/state` and handles new fields. 5. **Testing Requirements**: DTO Construction: Unit test DTO creation includes shuffle/repeat. Debounced Save (`+layout.svelte` tests): Mock `$playerStore`, `apiClient.savePlayerState`. Simulate store changes, verify `savePlayerState` called after debounce with correct DTO. Test rapid changes trigger one call. `sendBeacon` Logic (`+layout.svelte` tests): Mock `navigator.sendBeacon`. Simulate unload/visibility events. Verify `sendBeacon` called with correct URL and DTO. Verify debounced save cancellation. Manual browser testing for `sendBeacon` is crucial. Ensure robust error handling in `apiClient.savePlayerState`.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/stores/playerStore.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/services/apiClient.ts,frontend/src/lib/types/index.ts,frontend/src/routes/(app)/__tests__/layout.test.ts,frontend/src/lib/services/apiClient.test.ts`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Frontend: Final Styling, Polish, Comprehensive Testing, and Coverage Analysis",
      "details": "Final move for frontend polish, robustness, and thorough testing. 1. **Styling & Theme Review**: Systematically review all UI components/pages. Verify adherence to 3-color dark theme (CSS vars, Tailwind config). Check accent color consistency (sliders, active states). Ensure `shadcn-svelte` components styled via Tailwind props/customizations. Minimize custom CSS in `<style>` blocks. Verify `lucide-svelte` icons. Simplify Tailwind classes with `cn` where possible. 2. **Responsiveness & UX Polish (Manual Browser Testing)**: Test on desktop, tablet (portrait/landscape), mobile (portrait/landscape). Verify layout, readability, usability. Check mobile sidebar `Sheet` (open/close, scroll, access). Test all interactions (track selection, playback controls, volume, mute, shuffle/repeat). Ensure smooth `TrackList` scrolling and `scrollIntoView`. Verify dynamic tab title. Check `svelte-sonner` toasts. 3. **Code Quality & Cleanup**: Review Svelte/TS files. Confirm `xior` encapsulation in `apiClient.ts`. Adhere to `.augment-guidelines` (self-documenting code, small files/functions, SOLID/DRY, TS best practices like no `any`). Remove dead/commented code, unnecessary logs. Ensure proper Svelte store/reactivity use. 4. **Comprehensive Testing (Automated & Manual)**: Unit Tests: Finalize Vitest tests for components, stores, services, utils. Aim for high logical coverage. Manual Feature Testing: Playback, navigation, modes (shuffle/repeat). State Persistence: Debounced API saves, `navigator.sendBeacon` on unload, state restoration. SSE Updates: Dynamic track list updates, toasts. PWA: Installation, basic offline (app shell). 5. **Coverage Report Analysis**: Run `make front-test-coverage`. Analyze report. Address significant gaps in test coverage for critical logic/components. Aim for >80% coverage per project standards. 6. **Final CI Check**: Ensure `make ci` passes cleanly (lint, format, all tests for frontend/backend). Ensure error handling is robust across the application for user interactions and API responses.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`frontend/src,frontend/src/app.css,frontend/tailwind.config.js,frontend/tests`",
      "rest": "true"
    }
  ]
}
