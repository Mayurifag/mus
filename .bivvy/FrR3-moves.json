{
  "Climb": "FrR3",
  "moves": [
    {
      "status": "complete",
      "description": "Backend: Update PlayerState Entity/DTO/Repository; Remove Manual Scan; Implement Periodic Background Scan Worker & Basic SSE Endpoint; Adapt Scan Use Case",
      "details": "This move consolidates several completed backend tasks. 1. PlayerState Entity/DTO/Repository Update: `is_shuffle: bool` and `is_repeat: bool` added to `backend/src/mus/domain/entities/player_state.py`, `backend/src/mus/application/dtos/player_state.py`, and handled in `backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py`. Associated tests in `backend/tests/persistence/test_sqlite_player_state_repository.py` and `backend/tests/api/test_player_state_api.py` are updated. 2. Remove Manual Scan Functionality: `backend/src/mus/infrastructure/api/routers/scan_router.py` and `backend/tests/api/test_scan_api.py` deleted; router removed from `main.py`. 3. Implement Basic SSE Endpoint & Broadcaster: `backend/src/mus/infrastructure/api/sse_handler.py` created with client management, SSE endpoint, and `broadcast_sse_event` utility. SSE router added to `main.py`. (Full testing for sse_handler is a separate move). 4. Implement Periodic Background Scanner Worker: `backend/src/mus/infrastructure/tasks/background_scanner.py` created with `PeriodicScanner` class. 5. `main.py` `lifespan` Refactor: Modified to retain DB/cover cleaning, then instantiate and start `PeriodicScanner`. Scanner is stopped on shutdown. Tests in `backend/tests/test_main_startup.py` updated. 6. `ScanTracksUseCase` Adaptation: Modified in `backend/src/mus/application/use_cases/scan_tracks_use_case.py` to call `broadcast_sse_event`. Tests in `backend/tests/application/test_scan_tracks_use_case.py` updated.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`backend/src/mus/domain/entities/player_state.py,backend/src/mus/application/dtos/player_state.py,backend/src/mus/infrastructure/persistence/sqlite_player_state_repository.py,backend/tests/persistence/test_sqlite_player_state_repository.py,backend/tests/api/test_player_state_api.py,backend/src/mus/main.py,backend/src/mus/infrastructure/api/sse_handler.py,backend/src/mus/application/use_cases/scan_tracks_use_case.py,backend/tests/application/test_scan_tracks_use_case.py,backend/tests/test_main_startup.py,backend/src/mus/infrastructure/tasks/background_scanner.py,backend/tests/infrastructure/tasks/test_background_scanner.py`",
      "rest": "skip"
    },
    {
      "status": "complete",
      "description": "Frontend: PWA Setup",
      "details": "Implement PWA basics. 1. PWA Setup: `frontend/static/manifest.json` configured with app details and icons. `frontend/src/service-worker.ts` uses `$service-worker.build` and `$service-worker.files` for caching, including `/` route. Service worker registered in `frontend/src/hooks.client.ts`. `frontend/src/app.html` links manifest, sets theme color, apple-touch-icon. This part is verified as complete based on file analysis.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/json.mdc`",
      "filepaths_to_modify": "`frontend/static/manifest.json,frontend/static/images/icon-192.svg,frontend/static/images/icon-512.svg,frontend/src/service-worker.ts,frontend/src/app.html,frontend/src/hooks.client.ts`",
      "rest": "skip"
    },
    {
      "status": "complete",
      "description": "Frontend: Implement SSE-Driven Track Updates & Generic Notifications; Backend: Refactor SSE Event Structure",
      "details": "Backend: Refactor SSE to use a single, generic event payload (flat JSON: `message_to_show`, `message_level`, `action_key`, `action_payload`). Update `ScanTracksUseCase` in `backend/src/mus/application/use_cases/scan_tracks_use_case.py` to generate these events with appropriate messages based on scan results (e.g., 'New track: {Artist} - {Title}', 'X new tracks added.', 'Y tracks updated.', 'Music library updated.', or null message if no changes). `message_level` will be 'success' for changes, null otherwise. `action_key` will be 'reload_tracks' for changes, null otherwise. Update `backend/src/mus/infrastructure/api/sse_handler.py` to send this flat payload. Write/update tests in `backend/tests/application/test_scan_tracks_use_case.py` to verify new SSE payload generation. Frontend: Create `frontend/src/lib/services/eventHandlerService.ts`. This service will contain `initEventHandlerService()` to call `apiClient.connectTrackUpdateEvents(handleMusEvent)`, and `handleMusEvent(payload)` which parses the flat SSE payload. If `payload.message_to_show` is present, it triggers a `svelte-sonner` toast with the message and level. If `payload.action_key === 'reload_tracks'`, it calls `apiClient.fetchTracks()` then `trackStore.setTracks()`. Unknown actions are logged. Modify `frontend/src/routes/(app)/+layout.svelte` to call `initEventHandlerService()` in `onMount`. Modify `frontend/src/routes/(app)/+page.svelte` to remove the 'Scan Music Library' button and all related local state and logic (`isScanning`, `scanMessage`, `handleScan` function). Write tests for `eventHandlerService.ts` (mocking `apiClient`, `trackStore`, `toast`), for `+page.svelte` (verifying UI cleanup), and for `+layout.svelte` (verifying service initialization).",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/typescript.mdc,.cursor/rules/svelte.mdc`",
      "filepaths_to_modify": "`backend/src/mus/application/use_cases/scan_tracks_use_case.py,backend/src/mus/infrastructure/api/sse_handler.py,backend/tests/application/test_scan_tracks_use_case.py,frontend/src/lib/services/eventHandlerService.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/routes/(app)/+page.svelte,frontend/src/lib/services/eventHandlerService.test.ts,frontend/src/routes/(app)/+page.svelte.test.ts,frontend/src/routes/(app)/+layout.svelte.test.ts`",
      "rest": "true"
    },
    {
      "status": "complete",
      "description": "Frontend: Core Setup - Dependencies (xior, coverage), Encapsulated xior API Client, Coverage Config, CSS/Icon Verification",
      "details": "Perform foundational frontend setup and refactoring. 1. Dependencies: RUN `make front-npm-install ARGS=xior`, RUN `make front-npm-dev-install ARGS=@vitest/coverage-v8`. 2. `apiClient.ts` Refactor with xior: Entirely refactor `frontend/src/lib/services/apiClient.ts`. Instantiate and export a single, global `xior` instance. Configure its `baseURL` (dev: `http://localhost:8000/api/v1`, prod: `/api/v1`). All API functions (`fetchTracks`, `fetchPlayerState`, `savePlayerState`, `getStreamUrl`) must use this `xior` instance and primarily return/handle `response.data`. Add basic console error logging for failed API requests within this file. No other frontend files should make direct `fetch` calls. Add a new function `connectTrackUpdateEvents(onMessageCallback: (eventData: any) => void): EventSource` that establishes an `EventSource` connection to the backend's SSE endpoint (`/api/v1/events/track-updates`), parses `JSON.parse(event.data)`, and calls `onMessageCallback` with the parsed event data. It should handle basic error/reconnection logic for the EventSource. Write comprehensive unit tests for all `apiClient.ts` functions, mocking `xior` and `EventSource` (create/update `frontend/src/lib/services/apiClient.test.ts`). 3. Vite & Coverage: Update `frontend/vite.config.ts` for Vitest coverage: `test: { coverage: { provider: 'v8', reporter: ['text', 'json', 'html'], include: ['src/lib/**/*.{ts,svelte}', 'src/routes/**/*.{ts,svelte}'], exclude: ['src/**/*.test.{ts,svelte}', 'src/**/*.spec.{ts,svelte}', 'src/**/__tests__', 'src/app.d.ts', 'src/vite-env.d.ts'] } }`. Add `\\\"test:coverage\\\": \\\"vitest run --coverage\\\"` to `frontend/package.json` scripts. 4. CSS & Icon Verification: Review `frontend/src/app.css`, `frontend/tailwind.config.js`. Solidify 3-color dark theme via CSS variables. Ensure Tailwind utilities and Shadcn components use these correctly. Verify `lucide-svelte` icons render.",
      "rules_filepaths_to_follow": "`.cursor/rules/json.mdc,.cursor/rules/typescript.mdc,.cursor/rules/svelte.mdc,.cursor/rules/css.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`frontend/package.json,frontend/vite.config.ts,frontend/src/lib/services/apiClient.ts,frontend/src/lib/services/apiClient.test.ts,frontend/src/app.css,frontend/tailwind.config.js`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Frontend: Implement Main Application Layout Shell (Desktop & Mobile) with Minimal Custom CSS",
      "details": "Redevelop main Svelte layout components, prioritizing Tailwind CSS. 1. Main Layout (`frontend/src/routes/(app)/+layout.svelte`): Desktop: Two-column area above footer (Main Content for `<slot />`, Right Sidebar). Footer fixed (`h-20`). Main content/sidebar fill `h-[calc(100vh-5rem)]` (adjust 5rem based on actual footer height). Mobile: Main content full width, sidebar hidden. 2. Right Sidebar (`frontend/src/lib/components/layout/RightSidebar.svelte`): Create this component. Style: `w-64` (desktop), `bg-muted`, `text-foreground`, `p-4`. Content: Placeholder text (e.g., \\\"Library Actions\\\"). 3. Mobile Sidebar `Sheet`: In `+layout.svelte` or a new `MobileMenuButton.svelte` (imported into `PlayerFooter.svelte`), integrate Shadcn `Sheet`. Triggered by a `Menu` icon `Button` in `PlayerFooter.svelte` (visible on mobile). Sheet renders `RightSidebar.svelte` content. Unit tests for `RightSidebar.svelte` and `Sheet` interaction.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc`",
      "filepaths_to_modify": "`frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/components/layout/RightSidebar.svelte,frontend/src/lib/components/layout/PlayerFooter.svelte`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Frontend: Refactor Stores (Player, Track) for New Features, Dynamic Tab Title, Initial State",
      "details": "Overhaul Svelte stores. 1. `playerStore.ts`: Update `PlayerStoreState` to include `is_shuffle: boolean`, `is_repeat: boolean`. Add actions: `toggleShuffle()`, `toggleRepeat()`. 2. `trackStore.ts`: Update `TrackStoreState` to include `playHistory: Track[]` (or `track_id: number[]`). Actions: `setTracks(tracks: Track[])`. `playTrack(index: number)`: updates `playerStore.currentTrack`, adds to `playHistory`. `nextTrack()`: Implement shuffle, repeat (single), loop all logic. `previousTrack()`: Implement shuffle history, original previous logic. All navigation actions update `playerStore.currentTrack` and call `playerStore.play()`. 3. Initial State & Tab Title (`+layout.svelte`): Initialize `trackStore` and `playerStore` from `data` (including `is_shuffle`, `is_repeat`). Handle default track selection. Reactive `document.title` based on `$playerStore.currentTrack`. Note: SSE connection for general track updates (`tracks_updated`, etc.) is now handled by `eventHandlerService.ts` from an earlier move, this move ensures stores are correctly populated from initial load and can be updated by that service. Unit tests for store actions, initial state, tab title.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/stores/playerStore.ts,frontend/src/lib/stores/trackStore.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/types/index.ts`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Frontend: Implement/Enhance TrackList and Interactive TrackItem Components",
      "details": "Enhance Svelte components for track display. 1. `TrackItem.svelte`: Add interactive progress bar (Shadcn `Slider` or custom div) under track name/artist if `isSelected` and `$playerStore.isPlaying`, linked to `$playerStore.currentTime` and `$playerStore.duration`. 2. `TrackList.svelte`: When `$trackStore.currentTrackIndex` changes, scroll corresponding `TrackItem` into view using `element.scrollIntoView({ behavior: 'smooth', block: 'nearest' })`. Update unit tests for `TrackItem.svelte` (progress bar) and `TrackList.svelte` (scroll-to-active).",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/components/domain/TrackItem.svelte,frontend/src/lib/components/domain/TrackList.svelte,frontend/src/routes/(app)/+page.svelte,frontend/src/lib/components/domain/TrackItem.svelte.test.ts,frontend/src/lib/components/domain/TrackList.svelte.test.ts`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Frontend: Implement Full PlayerFooter, Audio Logic Enhancements, and Visual Volume Feedback",
      "details": "Enhance player footer and audio logic. 1. `PlayerFooter.svelte`: Add: Visual Volume Feedback (temporary numeric percentage display on volume change). Shuffle `Button` (icon highlights if `$playerStore.isShuffle`, calls `playerStore.toggleShuffle()`). Repeat `Button` (icon highlights if `$playerStore.is_repeat`, calls `playerStore.toggleRepeat()`). Mobile: Add `Menu` `Button` for sidebar `Sheet` (from Move 3). Ensure sliders use accent color. 2. Audio Logic (`+layout.svelte`): `ended` event listener: if `$playerStore.is_repeat`, call `audio.play()`; else call `trackStore.nextTrack()`. Update unit tests for new footer interactions and audio event handlers.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/components/layout/PlayerFooter.svelte,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/components/layout/PlayerFooter.svelte.test.ts`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Frontend: Implement Player State Persistence (Debounced API Calls with xior & Beacon API)",
      "details": "Implement robust player state saving. 1. State Payload DTO Construction: Update helper to construct `PlayerStateDTO` including `is_shuffle: $playerStore.isShuffle`, `is_repeat: $playerStore.is_repeat`. 2. Debounced Save Logic (`+layout.svelte` or `playerStore.ts`): Update `debouncedSavePlayerState` to use `apiClient.savePlayerState()` (with `xior`) and include new shuffle/repeat states. 3. Beacon API on Unload (`+layout.svelte`): Add `beforeunload` and `visibilitychange` listeners to use `navigator.sendBeacon(\\\"/api/v1/player/state\\\", JSON.stringify(playerStateDto))` with the full DTO. 4. Testing: Unit test DTO construction, debouncing. Manually test `sendBeacon`.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc`",
      "filepaths_to_modify": "`frontend/src/lib/stores/playerStore.ts,frontend/src/routes/(app)/+layout.svelte,frontend/src/lib/services/apiClient.ts`",
      "rest": "true"
    },
    {
      "status": "todo",
      "description": "Frontend: Final Styling, Polish, Comprehensive Testing, and Coverage Analysis",
      "details": "Conduct final review and QA. 1. Styling & Theme Review: Check UI against 3-color dark theme. Verify accent colors. Ensure consistent styling. 2. Responsiveness & UX Polish: Test on desktop, tablet, mobile. Polish interactions, scrolling. Ensure mobile sidebar `Sheet` works. 3. Code Quality & Cleanup: Review Svelte/TS files. Confirm `xior` encapsulation. 4. Comprehensive Testing: Finalize unit tests. Manually test all features: playback, shuffle, repeat, volume, mute, track selection, state persistence (including Beacon), SSE updates, PWA installation/offline. 5. Coverage Report: Run `make front-test-coverage`. Analyze report, address gaps. 6. Final CI Check: Ensure `make ci` passes cleanly.",
      "rules_filepaths_to_follow": "`.cursor/rules/svelte.mdc,.cursor/rules/typescript.mdc,.cursor/rules/css.mdc,.cursor/rules/makefile.mdc`",
      "filepaths_to_modify": "`frontend/src`",
      "rest": "true"
    }
  ]
}
