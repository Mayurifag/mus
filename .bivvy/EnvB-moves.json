{
  "Climb": "EnvB",
  "moves": [
    {
      "status": "todo",
      "description": "Integrate .env file for backend MUSIC_DIR configuration, update .gitignore, and add tests.",
      "details": "1. Create a new file named `.env` in the `backend/` directory. Add the following line to it: `MUSIC_DIR=\"./test_music_data_from_env\"`. This path is a placeholder; the actual path can be customized by the user locally. 2. Modify `backend/src/mus/main.py`. At the very beginning of the file (after imports but before any other code, or very early in the `lifespan` context manager if that's more appropriate for the existing structure), add logic to load the `backend/.env` file. Use `python-dotenv` library's `load_dotenv` function. The path to the `.env` file should be robustly determined, for example: `from pathlib import Path; from dotenv import load_dotenv; dotenv_path = Path(__file__).resolve().parent.parent.parent / \".env\"; load_dotenv(dotenv_path=dotenv_path)`. 3. Verify that `backend/src/mus/infrastructure/scanner/file_system_scanner.py` continues to use `MUSIC_DIR` via `self.MUSIC_DIR = os.getenv(\"MUSIC_DIR\", \"./music\")` and that `os.makedirs(self.MUSIC_DIR, exist_ok=True)` is present in its `__init__` method. No changes are expected here if it follows prior task E4hN. 4. Modify the root `.gitignore` file. Add the line `/backend/.env` to ensure this file is not committed to the repository. Place it on a new line. 5. Create a new test file: `backend/tests/test_dotenv_integration.py`. This test suite must verify the `.env` integration for `MUSIC_DIR`. It should include: (a) A test case that creates a temporary `backend/.env` file with a custom `MUSIC_DIR` (e.g., `MUSIC_DIR=./temp_music_for_dotenv_test`), ensures this directory exists for the test, imports or triggers the application logic that loads `.env` and initializes `FileSystemScanner`, then asserts that an instance of `FileSystemScanner` uses the custom path from the test `.env` file. (b) A test case to verify that `FileSystemScanner` defaults to `./music` if `MUSIC_DIR` is not set in the system environment and not present in any `.env` file (or if the `.env` file doesn't exist or doesn't contain `MUSIC_DIR`). This may involve using `monkeypatch.delenv` and ensuring no test `.env` file is loaded. (c) Ensure proper setup and teardown for temporary files and directories created during tests (e.g., using `tmp_path` fixture from pytest). 6. Run `make ci` to ensure all tests pass and code quality checks are met.",
      "rules_filepaths_to_follow": "`.cursor/rules/python.mdc,.cursor/rules/text.mdc,.cursor/rules/makefile_commands.mdc`",
      "filepaths_to_modify": "`backend/.env,backend/src/mus/main.py,.gitignore,backend/tests/test_dotenv_integration.py`",
      "rest": "true"
    }
  ]
}