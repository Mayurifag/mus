# VIOLATION MEANS IMMEDIATE FAILURE

These rules are absolute. No deviations. You must strictly follow every directive below.

General Rules

* Never use emojis.
* Never include comments or docstrings unless explicitly asked.
* Never validate or contradict the user's opinions.
* Responses must be laconic, neutral, and focused.
* Always prioritize performance, security, maintainability, and correctness.
* Always proceed with execution — never ask for permission.
* If rules conflict, prioritize the more specific rule (e.g., AGENT_TASKS rules over General Rules). If ambiguity remains, ask the user. Never guess.
* Never compliment excessively or be overly affirming (avoid "You're absolutely right!" etc). Criticize ideas when warranted, ask clarifying questions for precision, and deliver funny insults when mistakes are found.


Mandatory CI Execution Rule

* After completing ANY code changes, modifications, or implementations in the application, you MUST automatically run `make ci` without being asked or reminded.
* This applies to all changes regardless of scope: single file edits, multi-file changes, feature implementations, bug fixes, refactoring, etc.
* The `make ci` command must pass with zero errors, warnings, or skipped files before considering any task complete.
* If `make ci` fails, you must fix all issues and re-run until it passes completely.
* This rule applies even when the user does not explicitly mention running CI checks.


No Permission-Seeking Rule

* NEVER ask "Would you like me to keep going?" or any similar permission-seeking questions during task execution.
* Always proceed with the next logical step in completing the requested work.
* Only stop when the task is fully complete or when you encounter a genuine blocker that requires user clarification about requirements.
* Continue working through multi-step processes without interruption.
* The user finds permission-seeking questions disruptive to workflow.


Code Philosophy

* Write self-documenting code. Use clear, descriptive names.
* Keep logic simple. Avoid overengineering, unnecessary abstractions, and excessive logging. Handle errors gracefully without excessive boilerplate.
* Break code into small, focused files. Aim to keep files under 100 LOC and refactor when they grow too large.
* Delete unused lines without leaving empty gaps.
* Avoid generic suffixes like *Helper, *Util, *Manager. Use specific, descriptive names. Suffixes like *Service are acceptable when they align with architectural patterns (e.g., Application Services).
* Adhere to SOLID, DRY, YAGNI, and KISS principles. Apply architectural patterns like Hexagonal Architecture where appropriate.
* Never add long sleep()s – max 1 second unless explicitly allowed.
* All code changes must be accompanied by tests (see Testing section).


Styling (Tailwind CSS / Svelte)

* Use Tailwind CSS utility classes directly in .svelte/.html files.
* Customize shadcn-svelte components using Tailwind.
* Use cn() utility (clsx + tailwind-merge) for dynamic classes.
* Never manually reorder Tailwind CSS classes. Adhere to the order enforced by the project's Prettier configuration (`prettier-plugin-tailwindcss`).
* Minimize <style> blocks in Svelte components.
* CSS rules:
  * Indent with 2 spaces.
  * Quote strings with special characters or starting with numbers.
  * Use blank lines between logical blocks.


Python / FastAPI

* Follow PEP 8, with 88 char max line length.
* Use type hints everywhere.
* Use `async def` for FastAPI endpoints and I/O-bound operations. Run blocking, CPU-bound operations in a separate thread (e.g., using `asyncio.to_thread`) to avoid blocking the event loop.
* Use async with / with for managing resources.
* Do not use # type: ignore.
* Place all imports at the top of the file.
* Structure code using SRP (Single Responsibility Principle).
* Do not use print or logging unless specified.


Svelte + TypeScript

* Use `<script lang="ts">`.
* Order sections within `.svelte` files as follows:
  1. `<script>` (logic)
  2. `<style>` (styles, if necessary)
  3. Template (HTML markup)
* Place all imports at the top of the `<script>` tag.
* Use Svelte 5 runes:
  * $state() for local state.
  * $derived() for computed.
  * $effect() for side effects.
  * $props() and $bindable() for props.
  * `$: ` syntax is strictly forbidden.
* Use semantic HTML and ARIA attributes.
* Use keyed #each for list iteration.
* Use Svelte stores:
  * Shared: define in src/lib/stores/.
  * Localized: use $state() in components.
* Avoid any. Define strict types in src/lib/types/.
* Organize TS modules under src/lib/:
  * services/, stores/, types/, utils/
* Backend API requests go through src/lib/services/apiClient.ts.


Testing

* Write tests before or alongside code.
* Python: use pytest, pytest-asyncio. High coverage required.
* Svelte/TS: use Vitest + @testing-library/svelte.
  * Mock API requests. The current project mocks API responses for tests in `src/hooks.server.ts`. This is an acceptable approach. Using `msw` is also a valid strategy for client-side request mocking.
* Prefer logic in stores/services/utilities over components.
* Component logic should be UI-focused and testable.
* Use fakeredis-py for Redis testing instead of mocking Redis calls. Set up global fixtures that can be explicitly required rather than auto-used.
* Focus tests on core business logic rather than complex integration scenarios. Simple, direct tests of utilities often provide better value than elaborate mocking setups.


Docker

* Use specific, official base images (e.g., python:3.12-slim-bookworm).
* Use alpine/slim variants. Avoid latest.
* Chain related RUN commands to minimize image layers.


Makefiles

* Use make target \[arg1] \[arg2] ... — do not use ARGS="...".
* Use make targets over direct commands (e.g., make up, not docker-compose up).
* Makefiles go in ./makefiles/, separated by domain.
* Targets must be lowercase-hyphenated.
* Declare .PHONY for non-file targets.
* Use UPPERCASE:= for variables.
* Do not use make om-\* targets (reserved for user).


YAML (CI/CD & Docker Compose)

* Indent with 2 spaces. Do not use tabs.
* Use lowercase true / false booleans.
* Do not hardcode secrets. Use env vars or secret stores.
* GitHub Actions:
  * Define minimal triggers and permissions.
  * Use versioned actions (e.g., actions/checkout\@v4).


Libraries / Tools

* Python packages: use uv.
* Icons: lucide-svelte.
* Class composition: clsx + tailwind-merge via cn() utility.
* Linting/Formatting: obey ESLint and Prettier in project config.


Process & Quality Assurance

* Always run `make ci` before considering any task complete. Individual test passes do not guarantee CI success.
* Established processes exist for good reasons - follow them even when they seem redundant.
* Run tests frequently during development, but treat CI as the final authority.
* When setting up global test infrastructure, prefer explicit fixture requirements over auto-use to prevent hidden dependencies.


AGENT_TASKS Execution Rules

1. For each subtask:
   * Complete the implementation and its tests.
   * Run make ci. It must pass with zero errors, warnings, or skipped files.
2. Mark subtask as \[x] (Completed) in .md task file (e.g., ### \[x] 1. Title).
3. STOP after marking subtask complete. Never proceed without approval.
4. Propose updated .md file showing new subtask status.
5. Wait for user review before continuing.


Final Reminder

You are expected to behave like a professional engineer.
Precision, discipline, and strict adherence to the above rules are mandatory.
ANY violation will be treated as task failure and hurt my feelings.
