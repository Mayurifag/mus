- When you consider task done, ALWAYS run `make ci` until it passes without ANY errors, no warnings, no linter errors, no skipped files, no code stdout/stderr.
- Strive for self-documenting code with clear, descriptive names for variables, functions, classes, and modules. Delete comments and docstrings of descriptions.
- Try to keep things simple - do not add unnecessary complexity, do not add much logging and errors handling.
- Keep files small and focused. If file gets more than 100 LOC, consider to refactor it.
- Try to write tests for non-obvious code
- Use best practices for code organization and structure, like SOLID, DRY, YAGNI, KISS, hexagonal architecture, etc.

// Styling (Tailwind CSS / Svelte)
- Primarily use Tailwind CSS utility classes directly in Svelte/HTML files.
- For Svelte, leverage `shadcn-svelte` components, customizing them directly using Tailwind CSS. Use the `cn` utility (from `clsx` and `tailwind-merge`) for dynamic class names. Minimize component-specific `<style>` blocks.
- Indentation in CSS/PostCSS: Use 2 spaces, not tabs. Maintain consistent formatting.
- Use blank lines to separate logical blocks in CSS files.
- Quote strings in CSS if they contain special characters or start with numbers/booleans.

// Python & FastAPI
- Adhere to PEP 8, with line lengths limited to 88 characters. Use type hints extensively for all function signatures and variables where practical.
- Keep Python functions small and focused on a single responsibility.
- Place all Python imports at the very top of the file. Avoid using `# type: ignore` or similar constructs.
- Use `async/await` for potentially blocking I/O operations in Python.
- Utilize context managers (`with` statements, `async with`) for resource management in Python (files, database connections, etc.).
- Avoid generic suffixes like 'Service', 'Util', 'Helper', or 'Manager' in Python class names. Prefer descriptive, domain-specific names (e.g., `OrderProcessor`, `UserRepository`).
- All FastAPI path operation functions (endpoints) MUST be defined using `async def`. Ensure the application remains fully asynchronous.
- Strive to write tests before or concurrently with implementation code (Test-First / TDD).

// Svelte & TypeScript
- In Svelte files, use `<script lang="ts">`. Structure components as: script, style (if necessary), then HTML template. Place imports at the top of the script block.
- Use Svelte stores (`writable`, `readable`, `derived` from `frontend/src/lib/stores/`) for shared state, subscribing with `$storeName`.
- Use SvelteKit's `load` functions (`+page.ts`, `+layout.ts`, or their `.server.ts` counterparts) for data fetching.
- Avoid `any` in TypeScript. Define clear interfaces and types in `frontend/src/lib/types/`, especially for API DTOs and store states. Use explicit parameter and return types for functions.
- Organize TypeScript code into logical modules (e.g., `frontend/src/lib/services/`, `frontend/src/lib/stores/`, `frontend/src/lib/utils/`). Use ES module syntax with named exports preferred, and path aliases (e.g., `@/lib/...`).
- Centralize backend API calls in `frontend/src/lib/services/apiClient.ts` using `xior`, ensuring typed request payloads and response data.
- MANDATORY: Use Svelte 5 runes for all reactivity. The `$:` syntax is FORBIDDEN in new code.
- Use `$state()` for component-local reactive state, `$derived()` for computed values, and `$effect()` for side effects.
- Use `$props()` for accessing component props and `$bindable()` for props that need two-way binding.
- Use keyed `#each` blocks when iterating over lists where element identity is important.
- Break down large components into smaller, reusable ones for better maintainability.
- Use semantic HTML elements and provide ARIA attributes where necessary to enhance accessibility.

// Testing
- Python: Write tests using pytest. Use `pytest-asyncio` for testing async code. Aim for high test coverage.
- Svelte/TypeScript: Write unit tests for components, stores, and utilities using Vitest and `@testing-library/svelte`. Use `msw` for mocking API requests in tests.
- Design components with clear props and events to facilitate testing.
- Business logic should ideally reside in Svelte stores, utility functions, or API services, which can be tested independently.
- Components should primarily focus on presentation and user interaction.

// Docker
- Dockerfiles: Use specific, official base image tags (e.g., `python:3.12-slim-bookworm`, `node:20-alpine`), not `latest` for production. Prefer slim or alpine variants.
- Dockerfiles: Combine related `RUN` commands using `&&` to minimize layers (e.g., update, install dependencies, and clean up in a single `RUN` command).

// Makefiles
- When suggesting `make` commands, use the format `make target [arg1] [arg2] ...` and avoid `ARGS="..."`.
- Always use `make` targets (e.g., `make up`, `make back-uv-install <package>`) over direct commands (e.g., `docker-compose ...`, `uv pip install ...`).
- For Makefiles (`.mk` files in `./makefiles/`): split by domain, use lowercase-hyphenated targets, always declare `.PHONY` for non-file targets, and use `UPPERCASE:=` for variables.
- Use `make` commands in project directory itself, not subfolders like `backend`, `frontend`.
- Run Docker operations via `make`: `make up`, `make build`, `make down`.
- Install Python packages via `make`: `make back-uv-install <package>`.
- NEVER use commands starting from `om-` (`make om-...`) like `make om-up`, only user may use them.

// YAML (GitHub Actions & Docker Compose)
- GitHub Actions YAML: Define precise triggers (`on`), set minimal `permissions`, use versioned actions (e.g., `actions/checkout@v4`)
- Docker Compose YAML: Clearly define services, build contexts, ports, and volumes.
- Secrets Management: Never commit secrets to YAML or code. Use environment variables or platform-specific secret stores (e.g., GitHub secrets).
- Indentation: Use 2 spaces for indentation in YAML files. Do NOT use tabs.
- Booleans: Use `true` or `false` (lowercase) in YAML.

// Preferred Libraries & Tools
- Python package management: `uv`.
- Frontend icons: `lucide-svelte`.
- Frontend class composition: `clsx` and `tailwind-merge` (often via `cn` utility from `shadcn-svelte`).
- Linting/Formatting: Adhere to project's ESLint (JS/TS/Svelte) and Prettier configurations.


// AGENT_TASKS Framework - Task Execution
- When working on a task defined in `AGENT_TASKS/`, you will follow these execution rules.
- **Refer to `AGENT_TASKS/.rules.md` to understand the task file structure you will be consuming.**
- **Execution Flow**:
    1.  Identify the current active task file (usually the most recent or one specified by the user).
    2.  Within that task file, identify the **next subtask** with a status of `[ ]` (To Do).
    3.  **Clearly state** which overall task and which specific subtask (by its number and title) you are about to work on.
    4.  Execute the subtask according to its `Details`, modifying files listed in `Filepaths to Modify` and using any `Relevant Make Commands`.
    5.  Upon completing the subtask's implementation and associated tests:
        -   **MANDATORY**: Run `make ci` until it passes **without ANY errors, warnings, linter issues, or skipped files.** This is a critical step. If `make ci` fails, analyze the errors and propose fixes even its not connected with your changes. Do not proceed until `make ci` is clean.
        -   Update the subtask's status to `[x]` (Completed) in its H3 heading (e.g., `### [x] 1. Subtask Title`).
    6.  **CRITICAL: After marking a subtask as `[x]` (and `make ci` has passed), you MUST STOP. This is an ONLY place where you stop.**
    7.  Propose the **complete, updated content** of the task file (`.md`) reflecting the new status of the completed subtask.
    8.  Wait for user feedback or approval before moving to the next subtask.
    9.  If a subtask involved no code changes (e.g., research), simply mark it `[x]` and propose the updated task file.
    10. When all subtasks in a task file are marked `[x]`, update the `Overall Task Status` at the top of the file to `[x]` as well.
- Always ensure your proposed code changes are complete for the subtask at hand.
- If you encounter an issue or realize a subtask needs refinement (e.g., different file paths, more details, or splitting into smaller sub-subtasks), communicate this clearly when you propose the updated task file after completing the current subtask.
