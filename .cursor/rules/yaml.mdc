---
description: YAML development standards for configuration files, especially GitHub Actions and docker-compose.
globs: ["*.yaml", "*.yml"]
alwaysApply: false
---
# YAML File Standards

<rule>
name: yaml_best_practices
description: Guidelines for writing and structuring YAML files, particularly for GitHub Actions and docker-compose.
filters:
  - type: file_extension
    pattern: "\\.ya?ml$"
  - type: content
    pattern: "(?s).*"

actions:
  - type: suggest
    message: |
      Follow these YAML development standards:

      1.  **Syntax & Formatting:**
          - Indentation: Use 2 spaces for indentation. Do NOT use tabs.
          - Consistency: Maintain consistent formatting for lists, dictionaries, and scalars.
          - Readability: Use blank lines to separate logical blocks or major sections.
          - Strings: Quote strings if they contain special characters, start with a number/boolean, or to preserve leading/trailing whitespace if significant. Prefer single quotes unless double quotes are needed for escape sequences.
          - Booleans: Use `true` or `false` (lowercase).

      2.  **No Comments:**
          - YAML files should be self-documenting through clear key names, structure, and well-chosen values.
          - Avoid comments unless absolutely necessary to explain a non-obvious configuration choice or a complex workflow step.

      3.  **GitHub Actions (`.github/workflows/*.yml`):**
          - `name`: Clear, descriptive name for the workflow.
          - `on`: Define triggers precisely (e.g., `push: branches: [main]`, `pull_request: types: [opened, synchronize]`, `workflow_dispatch`).
          - `permissions`: Set minimum required permissions for security.
          - `concurrency`: Configure concurrency to manage workflow runs (e.g., cancel in-progress for the same ref).
          - `jobs`:
            - Job IDs: Use clear, descriptive IDs (e.g., `backend-lint`, `frontend-test`).
            - `runs-on`: Specify appropriate runners (e.g., `ubuntu-latest`).
            - `steps`:
              - `name`: Provide a concise name for each step.
              - `uses`: Prefer versioned actions (e.g., `actions/checkout@v4`).
              - `with`: Pass parameters to actions.
              - `run`: For shell commands. Use `make` targets from project Makefiles where possible (e.g., `make back-lint`, `make front-test`).
              - Environment Variables: Use `env` block for setting environment variables. Use secrets for sensitive data (`${{ secrets.MY_SECRET }}`).
            - Caching: Implement caching for dependencies (e.g., `uv` cache, `npm` cache via `actions/setup-node` options or `actions/cache`).
            - Matrix Strategy: Use `strategy.matrix` for running jobs with different configurations (e.g., Python versions, Node versions).
            - Job Dependencies: Use `needs` to define execution order of jobs.

      4.  **`docker-compose.yml`:**
          - `version`: Specify a Compose file format version (e.g., '3.8' or omit for latest schema if Docker Compose v2+).
          - `services`:
            - Service Names: Clear and concise (e.g., `backend`, `frontend`, `db`).
            - `build`:
              - `context`: Path to the Docker build context.
              - `dockerfile`: Path to the Dockerfile.
              - `args`: Build arguments.
            - `image`: Specify image name if not building locally.
            - `ports`: Map container ports to host ports (`HOST:CONTAINER`).
            - `volumes`: Define volume mounts (`HOST_PATH:CONTAINER_PATH` or named volumes). Be specific about read-only (`:ro`) if applicable.
            - `environment`: Define environment variables. Consider using an `.env` file.
            - `depends_on`: Define service startup order (primarily for startup, not runtime readiness).
            - `command`: Override the default command for the image.
            - `restart`: Define restart policy (e.g., `unless-stopped`, `always`).
          - `volumes`: Define named volumes.
          - `networks`: Define custom networks if needed.

      5.  **General:**
          - DRY (Don't Repeat Yourself): Use YAML anchors and aliases (`&anchor_name`, `*anchor_name`) for reusable blocks if the YAML becomes very repetitive (use sparingly as it can reduce readability if overused).
          - Security: Do not commit secrets directly into YAML files. Use environment variables or secret management systems. For GitHub Actions, use encrypted secrets.
</rule>
