---
description: TypeScript development standards for SvelteKit projects, emphasizing strong typing, clarity, testability, and minimal comments.
globs: ["*.ts", "*.tsx"]
alwaysApply: false
---
# TypeScript Development Standards (SvelteKit Frontend Focus)

<rule>
name: typescript_best_practices_sveltekit
description: Core TypeScript development standards for SvelteKit frontends.
filters:
  - type: file_extension
    # Match .ts and .tsx files, but prioritize rules in svelte.mdc for <script lang="ts"> blocks
    pattern: "\\.tsx?$"
  - type: file_path
    # Primarily target frontend code
    pattern: "(frontend/src/.*\\.tsx?$)|(src/lib/.*\\.tsx?$)|(src/routes/.*\\.tsx?$)|(src/hooks.*\\.ts$)|(src/service-worker\\.ts$)"
  - type: content
    pattern: "(?s).*"

actions:
  - type: suggest
    message: |
      Follow these TypeScript development standards for SvelteKit:

      1.  **Strong Typing & Clarity:**
          - Avoid `any` where possible. Use `unknown` for values with truly unknown types and perform type checking, or define specific types/interfaces.
          - Define clear interfaces and types for all data structures, especially for API responses (matching backend DTOs from `src/mus/application/dtos/`) and Svelte store states. Store these in `frontend/src/lib/types/`.
          - Use SvelteKit's provided types where applicable (e.g., `PageData`, `LayoutData`, `ActionData`, `LoadEvent`, `ServerLoadEvent`, `RequestEvent`).
          - Use `Readonly<T>` or `readonly` modifiers for immutable data structures where appropriate.
          - Utilize utility types like `Partial<T>`, `Required<T>`, `Pick<T>`, `Omit<T>` to create new types from existing ones.
          - Function signatures must have explicit parameter and return types.

      2.  **Self-Documenting Code & Minimal Comments:**
          - No comments unless explaining *why* a complex or non-obvious piece of logic/type definition is necessary.
          - Prefer clear, descriptive names for variables, functions, types, interfaces, and modules.
          - Complex type logic should be broken down or aliased for readability.

      3.  **Modules & Imports:**
          - Organize code into logical modules (e.g., `frontend/src/lib/services/`, `frontend/src/lib/stores/`, `frontend/src/lib/utils/`, `frontend/src/lib/types/`).
          - Use ES module syntax (`import`/`export`).
          - Imports must be at the top of the file.
          - Prefer named exports over default exports for better tree-shaking and refactorability, unless a single export is idiomatic (e.g., SvelteKit `load` functions).
          - Use path aliases configured in `tsconfig.json` and `vite.config.ts` (e.g., `@/lib/...`).

      4.  **Async/Await:**
          - Always use `async/await` for Promise-based operations (e.g., `fetch` calls in `apiClient.ts`, SvelteKit `load` functions).
          - Ensure proper error handling for async operations using `try/catch` blocks or `.catch()` on Promises.

      5.  **Error Handling:**
          - Handle potential errors gracefully, especially from API calls or SvelteKit `load` functions.
          - Use SvelteKit's `@sveltejs/kit/error` helper for throwing user-facing errors in `load` functions or form actions.
          - For client-side operations, provide feedback to the user (e.g., using `sonner` for toasts).

      6.  **SvelteKit Integration:**
          - `load` Functions: Type `load` functions correctly (e.g., `export const load: PageServerLoad = async ({ fetch, params }) => {...}`).
          - API Client (`src/lib/services/apiClient.ts`):
            - Centralize `fetch` calls to your backend.
            - Type request payloads and response data.
            - Handle API base URLs and potential error states.
          - Stores (`src/lib/stores/`): Define store state with TypeScript interfaces. Actions within stores should be typed.

      7.  **Utilities & Libraries:**
          - `date-fns`: Use for all date and time manipulations and formatting.
          - `lucide-svelte`: Use for icons.
          - `clsx`, `tailwind-merge`: Use (often via `cn` from `shadcn-svelte`) for dynamic and clean class string generation.

      8.  **Testing:**
          - Write unit tests for utility functions, API client logic, and Svelte stores using Vitest.
          - Use `msw` (Mock Service Worker) for mocking API requests in tests, especially for `load` functions and component integration tests.
          - Code should be structured to be easily testable (e.g., pure functions, dependency injection where appropriate).

      9.  **Linting & Formatting:**
          - Adhere to ESLint and Prettier configurations set up for the project. Resolve all linter/formatter warnings and errors.
          - `npm run lint` and `npm run format` should pass cleanly.
</rule>
