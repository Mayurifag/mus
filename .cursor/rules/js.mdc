---
description:
globs: *.js,*.mjs
alwaysApply: false
---
# JavaScript Development Standards

Standards and best practices for JavaScript development in the mus project.

<rule>
name: javascript_best_practices
description: Core JavaScript development standards and best practices
filters:
  - type: file_extension
    pattern: "\\.(js|mjs)$"
  - type: content
    pattern: ".*"

actions:
  - type: suggest
    message: |
      ## General Guidelines
      - Follow eslint-config-standard rules
      - Use ES Modules for code organization
      - Declare variables with const by default
      - Use let only for reassignable variables
      - Use strict equality (===, !==)
      - Implement proper Promise handling
      - Follow single responsibility principle
      - Add space after function name before parentheses:
        ```js
        // Correct (as per eslint-config-standard)
        function name (args) {
          // ...
        }

        // Incorrect (as per eslint-config-standard)
        function name(args) {
          // ...
        }
        ```

      ## DOM Manipulation & Performance
      - Use specific selectors:
        ```js
        // Preferred
        document.getElementById('id')
        document.querySelector('#id')
        document.querySelector('[data-track="current"]')

        // Avoid when targeting single elements
        document.querySelectorAll('.class')[0]
        ```
      - Implement event delegation for dynamic content:
        ```js
        parentElement.addEventListener('click', (e) => {
          if (e.target.matches('.track-item')) {
            handleTrack(e.target);
          }
        });
        ```
      - Manage DOM updates efficiently:
        - Batch DOM updates
        - Use DocumentFragment for multiple insertions
        - Modify classList instead of style property
        - Cache frequently accessed elements

      ## HTMX Integration
      - Handle HTMX events appropriately:
        ```js
        document.body.addEventListener('htmx:afterSettle', (e) => {
          // Update UI after HTMX content loads
        });
        ```
      - Use proper HTMX attributes for triggers
      - Maintain state consistency after HTMX updates
      - Handle HTMX errors gracefully

      ## Error Handling
      - Use try/catch blocks for error-prone operations:
        ```js
        try {
          await fetch('/api/tracks');
        } catch (error) {
          console.error('Failed to fetch tracks:', error);
          // Handle error appropriately
        }
        ```
      - Implement proper error boundaries
      - Log errors with context
      - Provide user-friendly error messages
      - Handle async errors consistently

      ## Accessibility
      - Manage keyboard focus:
        ```js
        element.focus({ preventScroll: true });
        ```
      - Use appropriate ARIA attributes
      - Handle keyboard events properly
      - Ensure dynamic content is accessible
      - Maintain focus management during updates

      ## Maintainability
      - Use descriptive names for variables and functions
      - Extract repeated logic into functions
      - Keep functions small and focused
      - Use constants for magic values
      - Document complex algorithms
      - Implement proper error recovery

examples:
  - input: |
      // Bad: Inefficient DOM manipulation
      document.querySelectorAll('.track').forEach(track => {
        track.style.display = 'none';
      });

      // Good: Efficient class-based approach
      document.getElementById('track-container').classList.add('hidden');
  - input: |
      // Bad: Poor error handling
      fetch('/api/tracks')
        .then(data => updateTracks(data));

      // Good: Proper error handling
      try {
        const response = await fetch('/api/tracks');
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        await updateTracks(data);
      } catch (error) {
        console.error('Failed to fetch tracks:', error);
        showErrorMessage('Failed to load tracks');
      }

metadata:
  priority: high
  version: 1.0
</rule>

<rule>
name: js_discourage_comments
description: Guidelines for minimizing comments in JavaScript code
filters:
  - type: file_extension
    pattern: "\\.(js|mjs)$"
  - type: content
    pattern: "(/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/|//[^\\n]*|/\\*\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/)"

actions:
  - type: suggest
    message: |
      Comments in JavaScript should be avoided in favor of self-documenting code:

      1. General Guidelines:
         - Remove existing comments and JSDoc blocks
         - Use descriptive variable and function names
         - Break complex logic into well-named functions
         - Let the code structure explain itself

      2. Exceptions (only cases where comments are allowed):
         - Complex algorithms that cannot be simplified
         - Non-obvious business logic requiring domain knowledge
         - Browser-specific workarounds with bug references
         - Public API documentation (minimal)

      3. When a comment is necessary:
         - Keep it brief and focused
         - Explain WHY, not WHAT
         - Include links to relevant issues/specs
         - Remove outdated comments immediately

      Examples:
      ```js
      // Bad: Unnecessary comment
      // Function to handle track selection
      function handleTrackSelection(trackId) {
        // Get track element
        const track = document.getElementById(trackId);
        // Update selected state
        track.classList.add('selected');
      }

      // Good: Self-documenting code
      function selectTrack(trackId) {
        const track = document.getElementById(trackId);
        track.classList.add('selected');
      }

      // Acceptable: Complex algorithm explanation
      function calculateTrackProgress(currentTime, duration) {
        /*
         * Using logarithmic scale for smoother progress bar movement
         * at higher durations. Log base 10 provides good visual balance
         * between short (<1min) and long (>10min) tracks.
         */
        return Math.log10(1 + currentTime) / Math.log10(1 + duration);
      }
      ```

metadata:
  priority: high
  version: 1.0
</rule>
