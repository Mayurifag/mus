---
description:
globs:
alwaysApply: true
---
name: makefile_guidelines
description: Provides rules for generating and using makefile commands and standards for writing/organizing Makefiles in this project.

<rule>
name: makefile_usage_and_standards
description: Ensures make commands are generated correctly, provides context on available commands, and enforces Makefile writing standards.
filters:
  # Filter 1: Trigger on usage/suggestion of 'make command'
  - type: content
    # Matches 'make some-command', 'suggest using make build', etc.
    pattern: "(make\\s+[a-zA-Z0-9-]+)|(suggest.*make\\s+[a-zA-Z0-9-]+)"
  # Filter 2: Trigger when editing Makefile (.mk) files
  - type: file_extension
    pattern: "\\.mk$"

actions:
  - type: suggest
    message: |
      **Makefile Usage & Writing Guidelines:**

      ---
      **Part 1: Using Makefile Commands**
      ---

      **1. Correct Format:**
         - Always use the format `make target [arg1] [arg2] ...`
         - **DO NOT** use `ARGS="arg1 arg2"`. The Makefile parses arguments directly.
         - Do not add obvious comments
         - Example: `make install pytest-asyncio pytest-mock` (Correct)
         - Example: `make install ARGS="pytest-asyncio pytest-mock"` (Incorrect)
         - Use make commands in project directory, not subfolders like `backend`, `frontend` and so on.

      **2. Use Make, Not Direct Commands:**
         - Run Docker operations via `make`: `make up`, `make build`, `make down`. (Not `docker-compose ...`)
         - Install Python packages via `make`: `make install <package>`. (Not `pip install ...`)
         - Do not forget to update available commands after adding new ones or removing.
         - Always check if there are commands which might be executing using `make`

      ---
      **Part 2: Writing & Organizing Makefiles (`.mk` files)**
      ---

      **1. Organization:**
         - Split Makefiles by domain/service (e.g., `docker.mk`, `postgres.mk`) in `./docker/makefiles/`.
         - Keep each `.mk` file focused. Use `include` in the root `Makefile`.

      **2. Target Naming:**
         - Use lowercase with hyphens (e.g., `postgres-query`, `click-tables`).
         - Prefix service-specific commands (e.g., `postgres-up`).
         - Use descriptive names indicating the action.

      **3. PHONY Targets:**
         - **Always** declare `.PHONY` for targets not creating files, placed directly above the target.
         ```makefile
         .PHONY: build
         build:
             docker-compose build --pull
         ```

      **4. Variables:**
         - Use `UPPERCASE` for variables, defined at the top of the `.mk` file.
         - Use `:=` for immediate assignment (preferred).
         - Use descriptive names (e.g., `POSTGRES_RUN_NO_DEPS`).

examples:
  - input: "Install pytest-asyncio using pip"
    output: "Use `make install pytest-asyncio`"
  - input: "pip install pytest-asyncio"
    output: "make install pytest-asyncio"
  - input: "make install ARGS='pytest-asyncio pytest-mock'"
    output: "make install pytest-asyncio pytest-mock"
  - input: "docker-compose up -d"
    output: "make up"
  - input: "How do I run the tests?"
    output: "Use `make test`"

  - input: |
      # In docker.mk
      Restart: # No .PHONY, Capitalized
        docker-compose restart $(ARGS)
    output: |
      Suggest changing to:
      ```makefile
      .PHONY: restart
      restart:
          docker-compose restart $(ARGS)
      ```
  - input: |
      # In postgres.mk
      postgres_query: # Underscore instead of hyphen
          ${POSTGRES_RUN_NO_DEPS} psql -U postgres -c "$(ARGS)"
    output: |
       Suggest changing target name to `postgres-query`.

metadata:
  priority: high
  version: 1.0
</rule>
